/**
  ******************************************************************************
  * @file    BCDriver.h
  * @author  SRA
  * @brief   Driver to support the battery charger STBC02
  *
  * This file declares the public API for the ::BCDriver_t class. The driver
  * provides a minimal support for the battery charger STBC02. It uses the
  * following hardware IP:
  * - one TIM to generate the time base for the 1-wire communication through
  * the SW_SEL PIN.
  * - one GPIO PIN connected to the SW_SEL PIN of the STBC02 component.
  *
  * The time base frequency depends on the TIM configuration and usually
  * it is generated by CubeMX. The application must register a tick callback
  * using the BCDriverRegisterTickCallback() method. The callback is called from
  * the TIM ISR and can be used to implement the 1-wire protocol as specified
  * in the STBC02 reference manual.
  * This driver provides also the function to toggle and reset the PIN connected
  * to the SW_SEL PIN of the STBC02 component.
  *
  * An example of the protocol implementation is provided in the ::BCProtocol_t
  * class.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file in
  * the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  ******************************************************************************
  */

#ifndef INC_DRIVERS_BCADCDRIVER_H_
#define INC_DRIVERS_BCADCDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif


#include "drivers/IDriver.h"
#include "drivers/IDriver_vtbl.h"
#include "mx.h"


/**
  * Create  type name for _BCDriver_t.
  */
typedef struct _BCAdcDriver_t BCAdcDriver_t;

/**
  *  BCDriver_t internal structure.
  */
struct _BCAdcDriver_t
{
  /**
    * Base class object.
    */
  IDriver super;

  /* Driver variables should be added here. */

  /**
    * Specifies all the configuration parameters for the ADC peripheral linked to
    * an instance of this class. It based on the HAL driver generated by CubeMX.
    */
  MX_ADCParams_t *p_mx_adc_cfg;

};


/** Public API declaration */
/***************************/

/**
  * Allocate an instance of BCDriver_t. The driver is allocated
  * in the FreeRTOS heap.
  *
  * @return a pointer to the generic interface ::IDriver if success,
  * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
  */
IDriver *BCAdcDriverAlloc(void);

/**
  * Wait for injected group conversion to be completed,
  * get the result and converts it in mV
  *
  * @param _this [IN] specifies a pointer to a IDriver object
  * @return SYS_NOERROR_CODE
  */
sys_error_code_t BCAdcDriver_GetValue(IDriver *_this, uint16_t *p_value);


#ifdef __cplusplus
}
#endif

#endif /* INC_DRIVERS_ADCBCDRIVER_H_ */
