/**
  ******************************************************************************
  * @file    BCTimerDriver.h
  * @author  SRA
  * @brief   Driver to support the battery charger STBC02
  *
  * This file declares the public API for the ::BCDriver_t class. The driver
  * provides a minimal support for the battery charger STBC02. It uses the
  * following hardware IP:
  * - one TIM to generate the time base for the 1-wire communication through
  * the SW_SEL PIN.
  * - one GPIO PIN connected to the SW_SEL PIN of the STBC02 component.
  *
  * The time base frequency depends on the TIM configuration and usually
  * it is generated by CubeMX. The application must register a tick callback
  * using the BCDriverRegisterTickCallback() method. The callback is called from
  * the TIM ISR and can be used to implement the 1-wire protocol as specified
  * in the STBC02 reference manual.
  * This driver provides also the function to toggle and reset the PIN connected
  * to the SW_SEL PIN of the STBC02 component.
  *
  * An example of the protocol implementation is provided in the ::BCProtocol_t
  * class.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file in
  * the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  ******************************************************************************
  */
#ifndef INC_DRIVERS_BCTIMERDRIVER_H_
#define INC_DRIVERS_BCTIMERDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif


#include "drivers/IDriver.h"
#include "drivers/IDriver_vtbl.h"
#include "mx.h"


/**
  * Create  type name for _BCDriver_t.
  */
typedef struct _BCTimerDriverParams_t BCTimerDriverParams_t;

/**
  * Create  type name for _BCDriver_t.
  */
typedef struct _BCTimerDriver_t BCTimerDriver_t;

/**
  * Initialization parameters for the driver.
  */
struct _BCTimerDriverParams_t
{
  /**
    * Specifies the peripheral HAL initialization parameters generated by CubeMX.
    * This is the hardware timer used to implement the 1-wire communication.
    */
  MX_TIMParams_t *p_mx_tim_cfg;

  /**
    * Specifies the peripheral HAL initialization parameters generated by CubeMX.
    * This is the GPIO used to implement the 1-wire communication.
    */
  MX_GPIOParams_t *p_mx_gpio_sw_cfg;

};

/**
  *  BCDriver_t internal structure.
  */
struct _BCTimerDriver_t
{
  /**
    * Base class object.
    */
  IDriver super;

  /* Driver variables should be added here. */

  /**
    * Specifies all the configuration parameters for the TIM peripheral linked to
    * an instance of this class. It based on the HAL driver generated by CubeMX.
    */
  BCTimerDriverParams_t mx_handle;

};


/** Public API declaration */
/***************************/

/**
  * Allocate an instance of BCDriver_t. The driver is allocated
  * in the FreeRTOS heap.
  *
  * @return a pointer to the generic interface ::IDriver if success,
  * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
  */
IDriver *BCTimerDriverAlloc(void);

/**
  * Register the tick callback with the driver.
  *
  * @param _this [IN] specifies a pointer to a driver object.
  * @param callback_f specifies a callback function.
  * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
  */
sys_error_code_t BCTimerDriverRegisterElapsedCallback(BCTimerDriver_t *_this, pTIM_CallbackTypeDef callback_f);

/**
  * Toggle the PIN used to implement the Single Wire Protocol.
  *
  * @param _this [IN] specifies a pointer to a driver object.
  * @return SYS_NO_ERROR_CODE
  */
SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverToggleLine1W(BCTimerDriver_t *_this);

/**
  * Set LOW the PIN used to implement the Single Wire Protocol.
  *
  * @param _this [IN] specifies a pointer to a driver object.
  * @return SYS_NO_ERROR_CODE
  */
SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverResetLine1W(BCTimerDriver_t *_this);

/**
  * Set HIGH the PIN used to implement the Single Wire Protocol.
  *
  * @param _this [IN] specifies a pointer to a driver object.
  * @return SYS_NO_ERROR_CODE
  */
SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverSetLine1W(BCTimerDriver_t *_this);

/**
  * Set the ARR register of the Timer used to implement the Single Wire Protocol.
  *
  * @param _this [IN] specifies a pointer to a driver object.
  * @return SYS_NO_ERROR_CODE
  */
SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverSetTimARR(BCTimerDriver_t *_this, uint32_t value);

/** Inline functions definition */
/********************************/

SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverToggleLine1W(BCTimerDriver_t *_this)
{
  assert_param(_this != NULL);

  HAL_GPIO_TogglePin(_this->mx_handle.p_mx_gpio_sw_cfg->port, _this->mx_handle.p_mx_gpio_sw_cfg->pin);

  return SYS_NO_ERROR_CODE;
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverResetLine1W(BCTimerDriver_t *_this)
{
  assert_param(_this != NULL);

  _this->mx_handle.p_mx_gpio_sw_cfg->port->BRR = _this->mx_handle.p_mx_gpio_sw_cfg->pin;
//  HAL_GPIO_WritePin(_this->mx_handle.p_mx_gpio_sw_cfg->port, _this->mx_handle.p_mx_gpio_sw_cfg->pin, GPIO_PIN_RESET);

  return SYS_NO_ERROR_CODE;
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverSetLine1W(BCTimerDriver_t *_this)
{
  assert_param(_this != NULL);

  _this->mx_handle.p_mx_gpio_sw_cfg->port->BSRR = _this->mx_handle.p_mx_gpio_sw_cfg->pin;
//  HAL_GPIO_WritePin(_this->mx_handle.p_mx_gpio_sw_cfg->port, _this->mx_handle.p_mx_gpio_sw_cfg->pin, GPIO_PIN_RESET);

  return SYS_NO_ERROR_CODE;
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t BCDriverSetTimARR(BCTimerDriver_t *_this, uint32_t value)
{
  assert_param(_this != NULL);

  _this->mx_handle.p_mx_tim_cfg->p_tim->Instance->ARR = value;

  return SYS_NO_ERROR_CODE;
}

#ifdef __cplusplus
}
#endif

#endif /* INC_DRIVERS_BCDRIVER_H_ */
