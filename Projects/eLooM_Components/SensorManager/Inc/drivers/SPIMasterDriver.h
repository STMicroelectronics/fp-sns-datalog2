/**
  ******************************************************************************
  * @file    SPIMasterDriver.h
  * @author  SRA - MCD
  * @brief   SPI driver: master DMA
  *
  * Driver for the SPI in master mode. Communication on the bus is done in
  * DMA mode.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file in
  * the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  *
  ******************************************************************************
  */
#ifndef INCLUDE_DRIVERS_SPIMASTERDRIVER_H_
#define INCLUDE_DRIVERS_SPIMASTERDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "drivers/IIODriver.h"
#include "drivers/IDriver_vtbl.h"
#include "drivers/IIODriver_vtbl.h"
#include "mx.h"
#include "tx_api.h"


/* driver error code */
/*********************/

#ifndef SYS_NO_ERROR_CODE
#define SYS_NO_ERROR_CODE                                 0
#endif
#ifndef SYS_BASE_SPI_M_ERROR_CODE
#define SYS_BASE_SPI_M_ERROR_CODE                         1
#endif
#define SYS_SPI_M_WRITE_READ_ERROR_CODE                   SYS_BASE_SPI_M_ERROR_CODE + 1
#define SYS_SPI_M_WRITE_ERROR_CODE                        SYS_BASE_SPI_M_ERROR_CODE + 2
#define SYS_SPI_M_READ_ERROR_CODE                         SYS_BASE_SPI_M_ERROR_CODE + 3


/**
  * Create  type name for _SPIMasterDriver_t.
  */
typedef struct _SPIMasterDriver_t SPIMasterDriver_t;

/**
  * Initialization parameters for the driver.
  */
typedef struct _SPIMasterDriverParams_t
{
  /**
    * Specifies the peripheral HAL initialization parameters generated by CubeMX.
    */
  MX_SPIParams_t *p_mx_spi_cfg;

  /**
    * Generic parameter.
    */
  uint32_t param;
} SPIMasterDriverParams_t;

/**
  *  SPIMasterDriver internal structure.
  */
struct _SPIMasterDriver_t
{
  /**
    * Base class object.
    */
  IIODriver super;

  /* Driver variables should be added here */

  /**
    * Specifies all the configuration parameters for the SPI peripheral linked to
    * an instance of this class. It based on the HAL driver generated by CubeMX.
    */
  SPIMasterDriverParams_t mx_handle;

  /**
    * Synchronization object used to synchronize the low lever driver with the task.
    */
  TX_SEMAPHORE sync_obj;
};


/* Public API declaration */
/**************************/

/**
  * Allocate an instance of SPIMasterDriver. The driver is allocated
  * in the FreeRTOS heap.
  *
  * @return a pointer to the generic interface ::IDriver if success,
  * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
  */
IIODriver *SPIMasterDriverAlloc(void);

/**
  * Make a bidirectional communication in the SPI bus.
  *
  * @param _this [IN] specifies a pointer to a ::SPIMasterDriver object.
  * @param p_tx_data_buffer [OUT] specifies the buffer with the data to send.
  * @param p_rx_data_buffer [IN] specifies the buffer used to store the received data.
  * @param data_size [IN] specified the size in byte of the buffer.
  * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
  */
sys_error_code_t SPIMasterDriverWriteRead(SPIMasterDriver_t *_this, uint8_t *p_tx_data_buffer,
                                          uint8_t *p_rx_data_buffer, uint16_t data_size);

/**
  * Send one byte register address in the SPI bus in blocking mode. This method is used
  * to implement the communication protocol adopted by the ST MEMS standard driver.
  *
  * @param _this [IN] specifies a pointer to a SPIMasterDriver object.
  * @param reg_addr [IN] specifies a register address in the target device.
  * @param timeout_ms [IN] specifies a timeout in ms. If the IO operation doesn't end before the timeout expire, then an error is generated.
  * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
  */
sys_error_code_t SPIMasterDriverTransmitRegAddr(SPIMasterDriver_t *_this, uint8_t reg_addr, uint32_t timeout_ms);

/**
  * Select a device on the bus for the communications.
  *
  * @param _this [IN] specifies a pointer to a SPIMasterDriver object.
  * @param p_device_gpio_port [IN] specifies the GPIO Port of the device to select for the communications.
  * @param device_gpio_pin [IN] specifies the Port Pin of the device to select for the communications.
  * @return SYS_NO_ERROR_CODE
  */
sys_error_code_t SPIMasterDriverSelectDevice(SPIMasterDriver_t *_this, GPIO_TypeDef *p_device_gpio_port,
                                             uint16_t device_gpio_pin);

/**
  *
  * @param _this [IN] specifies a pointer to a SPIMasterDriver object.
  * @param p_device_gpio_port [IN] specifies the GPIO Port of the device to deselect for the communications.
  * @param device_gpio_pin [IN] specifies the Port Pin of the device to deselect for the communications.
  * @return SYS_NO_ERROR_CODE
  */
sys_error_code_t SPIMasterDriverDeselectDevice(SPIMasterDriver_t *_this, GPIO_TypeDef *p_device_gpio_port,
                                               uint16_t device_gpio_pin);


/* Inline functions definition */
/*******************************/

#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_DRIVERS_SPIMASTERDRIVER_H_ */
