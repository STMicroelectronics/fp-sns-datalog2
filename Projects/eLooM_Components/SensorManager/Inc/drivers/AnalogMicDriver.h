/**
  ******************************************************************************
  * @file    AnalogMicDriver.h
  * @author  SRA - MCD
  * @brief
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file in
  * the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  *
  ******************************************************************************
  */
#ifndef HSDCORE_INC_DRIVERS_ANALOGMICDRIVER_H_
#define HSDCORE_INC_DRIVERS_ANALOGMICDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif


#include "drivers/MDFDriver.h"
#include "drivers/MDFDriver_vtbl.h"


/**
  * Create  type name for _AnalogMicDriver_t.
  */
typedef struct _AnalogMicDriverParams_t AnalogMicDriverParams_t;

/**
  * Create  type name for _AnalogMicDriver_t.
  */
typedef struct _AnalogMicDriver_t AnalogMicDriver_t;

/**
  *  AnalogMicDriver_t internal structure.
  */
struct _AnalogMicDriver_t
{
  /**
    * Base class object.
    */
  MDFDriver_t super;

  /* Driver variables should be added here. */

  /**
    * Specifies the peripheral HAL initialization parameters generated by CubeMX.
    */
  MX_ADCParams_t *p_mx_adc_cfg;
};

/**
  * Initialization parameters for the driver.
  */
struct _AnalogMicDriverParams_t
{
  /**
    * Specifies the MDF HAL initialization parameters generated by CubeMX.
    */
  MX_MDFParams_t *p_mx_mdf_cfg;

  /**
    * Specifies the ADC HAL initialization parameters generated by CubeMX.
    */
  MX_ADCParams_t *p_mx_adc_cfg;

  /**
    * Generic parameter.
    */
  uint32_t param;
};


/** Public API declaration */
/***************************/

/**
  * Allocate an instance of AnalogMicDriver_t. The driver is allocated
  * in the FreeRTOS heap.
  *
  * @return a pointer to the generic interface ::IDriver if success,
  * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
  */
IDriver *AnalogMicDriverAlloc(void);

/**
  * Set the buffer that will be filled by the driver with audio data from the sensor.
  * The application must provide a data buffer before starting the driver.
  *
  * @param _this [IN] specifies an instance of the driver.
  * @param p_buffer [IN] specifies a pointer to the data buffer.
  * @param buffer_size [IN] specifies the size in word of the data buffer.
  * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
  */
static inline sys_error_code_t AnalogMicDrvSetDataBuffer(AnalogMicDriver_t *_this, int16_t *p_buffer,
                                                         uint32_t buffer_size);


/** Inline functions definition */
/********************************/

SYS_DEFINE_INLINE
sys_error_code_t AnalogMicDrvSetDataBuffer(AnalogMicDriver_t *_this, int16_t *p_buffer, uint32_t buffer_size)
{
  return MDFDrvSetDataBuffer((MDFDriver_t *)_this, p_buffer, buffer_size);
}


#ifdef __cplusplus
}
#endif

#endif /* HSDCORE_INC_DRIVERS_ANALOGMICDRIVER_H_ */
