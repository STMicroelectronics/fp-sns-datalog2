/**
 ******************************************************************************
 * @file    DataEvent.h
 * @author  STMicroelectronics - AIS - MCD Team
 * @version M.m.b
 * @date    May 13, 2022
 *
 * @brief  An event that encapsulate a data of type ::EMData_t.
 *
 * This kind of events are generated by data source implementing the
 * ::IDataEvent_tSrc interface. To receive this evens an object has to implement
 * the ::IDataEvent_tListener interface and register itself with a source of
 * data event.
 *
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file in
 * the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 ******************************************************************************
 */
#ifndef EMDATA_INC_EVENTS_DataEvent_t_H_
#define EMDATA_INC_EVENTS_DataEvent_t_H_

#ifdef __cplusplus
extern "C" {
#endif


#include "events/IEvent.h"
#include "services/em_data_format.h"

/**
 * Create  type name for ::_DataEvent.
 */
typedef struct _DataEvent DataEvent_t;

/**
 * Specialization of an IEvent that add ::EMData_t. Each event has a pointer to the ::IEventSrc object
 * that has generated the event.
 */
struct _DataEvent {
    /**
     * Base Interface.
     * It contains also a pointer to the Event Source that generated the event.
     */
    IEvent super;

    /**
     * Specify the data normalized according to the internal data format.
     */
    const EMData_t *p_data;

    /**
     * Specifies the timestamp of the data acquisition / generation.
     */
    double timestamp;

    /**
     * An application specific tag.
     */
    uint32_t tag;
};


/* Public API declaration */
/**************************/

/**
 * Initialize the interface IDataEvent_t. It should be called after the object allocation and before using the object.
 *
 * @param _this [IN] specifies a pointer to the event object.
 * @param p_source [IN] specifies the source of the event.
 * @param p_data [IN] specifies the buffer containing the raw data form the sensor.
 * @param timestamp [IN] specifies the timestamp of the data.
 * @param tag [IN] specifies an application specific tag.
 * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
 */
static inline
sys_error_code_t DataEventInit(IEvent *_this, const IEventSrc *p_source, const EMData_t *p_data, double timestamp, uint32_t tag);


// Inline functions definition
// ***************************

static inline
sys_error_code_t DataEventInit(IEvent *_this, const IEventSrc *p_source, const EMData_t *p_data, double timestamp, uint32_t tag) {
  assert_param(_this != NULL);
  DataEvent_t *p_obj = (DataEvent_t*)_this;

  IEventInit(_this, p_source);
  p_obj->p_data = p_data;
  p_obj->timestamp = timestamp;
  p_obj->tag = tag;

  return SYS_NO_ERROR_CODE;
}

#ifdef __cplusplus
}
#endif

#endif /* EMDATA_INC_EVENTS_DataEvent_t_H_ */
