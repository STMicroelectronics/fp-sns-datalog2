/**
 ******************************************************************************
 * @file    PCDDriver.h
  * @author  SRA
 * @brief
 ******************************************************************************
 * @attention
 *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file in
  * the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 *
 ******************************************************************************
 */
#ifndef PCDDRIVER_H_
#define PCDDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "drivers/IDriver.h"
#include "drivers/IDriver_vtbl.h"
#include "mx.h"

typedef unsigned int (*DeviceControlDriver_t)(unsigned long, unsigned long);

/**
 * Create  type name for _PCDDriver_t.
 */
typedef struct _PCDDriver_t PCDDriver_t;

/**
 * Initialization parameters for the driver.
 */
typedef struct _PCDDriverParams_t
{
  /**
   * Specifies the peripheral HAL initialization parameters generated by CubeMX.
   */
  MX_PCDParams_t *p_mx_pcd_cfg;

  /**
   * Generic parameter.
   */
  uint32_t param;
} PCDDriverParams_t;

/**
 *  PCDDriver_t internal structure.
 */
struct _PCDDriver_t
{
  /**
   * Base class object.
   */
  IDriver super;

  /* Driver variables should be added here. */

  /**
   * Specifies all the configuration parameters for the PCD peripheral linked to
   * an instance of this class. It based on the HAL driver generated by CubeMX.
   */
  PCDDriverParams_t mx_handle;

  uint16_t fifoSize;
  uint8_t n_INEPs;
  uint8_t n_OUTEPs;

  boolean_t isInitialized;
};

/** Public API declaration */
/***************************/

/**
 * Allocate an instance of PCDDriver_t. The driver is allocated
 * in the FreeRTOS heap.
 *
 * @return a pointer to the generic interface ::IDriver if success,
 * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
 */
IDriver* PCDDriverAlloc(void);

///**
// * Set the buffer that will be filled by the driver with audio data from the sensor.
// * The application must provide a data buffer before starting the driver.
// *
// * @param _this [IN] specifies an instance of the driver.
// * @param p_buffer [IN] specifies a pointer to the data buffer.
// * @param buffer_size [IN] specifies the size in word of the data buffer.
// * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
// */
sys_error_code_t PCDDrvSetFIFO(PCDDriver_t *_this, uint16_t fifo_s, uint8_t n_INEPs, uint8_t n_OUTEPs, uint16_t EPsize);

sys_error_code_t PCDDrvSetExtDCD(PCDDriver_t *_this, DeviceControlDriver_t fun);

/** Inline functions definition */
/********************************/

//SYS_DEFINE_INLINE
//sys_error_code_t DFSDMDriverFilterRegisterCallback(DFSDMDriver_t *_this, HAL_DFSDM_Filter_CallbackIDTypeDef CallbackID, pDFSDM_Filter_CallbackTypeDef pCallback)
//{
//  assert_param(_this != NULL);
//
//  HAL_DFSDM_Filter_RegisterCallback(_this->mx_handle.p_mx_dfsdm_cfg->p_dfsdm_filter, CallbackID, pCallback);
//
//  return SYS_NO_ERROR_CODE;
//}
#ifdef __cplusplus
}
#endif

#endif /* HSDCORE_INC_DRIVERS_PCDDRIVER_H_ */
