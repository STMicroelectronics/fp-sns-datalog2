/**
  ******************************************************************************
  * @file    bluenrg1_gatt_aci.h
  * @author  AMG - RF Application team
  * @version V1.0.0
  * @brief   Header file for external uC - BlueNRG-x in network coprocessor mode
  *          (gatt_aci)
  *          Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
#ifndef _BLUENRG1_GATT_ACI_H_
#define _BLUENRG1_GATT_ACI_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "bluenrg1_types.h"

/** @addtogroup Middlewares
  *  @{
  */

/** @defgroup ST
  *  @{
  */

/** @defgroup SimpleBlueNRG_HCI
  *  @{
  */

/**
  *@addtogroup GATT GATT
  *@brief GATT layer.
  *@{
  */

/**
  *@defgroup GATT_Functions GATT functions
  *@brief API for GATT layer.
  *@{
  */

/** Documentation for C union service_uuid_t */
typedef union service_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t service_uuid_16;
  /** 128-bit UUID
   */
  uint8_t service_uuid_128[16];
} service_uuid_t;
/** Documentation for C union include_uuid_t */
typedef union include_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t include_uuid_16;
  /** 128-bit UUID
   */
  uint8_t include_uuid_128[16];
} include_uuid_t;
/** Documentation for C union char_uuid_t */
typedef union char_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} char_uuid_t;
/** Documentation for C union char_desc_uuid_t */
typedef union char_desc_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} char_desc_uuid_t;
/** Documentation for C union uuid_t */
typedef union uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t uuid_16;
  /** 128-bit UUID
   */
  uint8_t uuid_128[16];
} uuid_t;
/** Documentation for C struct handle_entry_t */
typedef struct handle_entry_t_s
{
  /** The handles for which the attribute value has to be read
    *  Values:
    *  - 0x0001 ... 0xFFFF
    */
  uint16_t handle;
} handle_entry_t;
/**
  * @brief Initialize the GATT layer for server and client roles.  It adds also
  *        the GATT service with Service Changed Characteristic.  Until this
  *        command is issued the GATT channel will not process any commands even
  *        if the  connection is opened. This command has to be given before
  *        using any of the GAP features.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_init(void);
/**
  * @brief Add a service to GATT Server. When a service is created in the server,
  *        the host needs to reserve the handle ranges for this service using
  *        max_attribute_records parameter. This parameter specifies the maximum
  *        number of attribute records that can be added to this service
  *        (including the service attribute, include attribute, characteristic
  *        attribute, characteristic value attribute and characteristic
  *        descriptor attribute). Handle of the created service is returned in
  *        command complete event. Service declaration is taken from the service
  *        pool.  The attributes for characteristics and descriptors are
  *        allocated from the attribute pool.
  * @param service_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param service_uuid See @ref service_uuid_t
  * @param service_type Service type.
  *        Values:
  *        - 0x01: Primary Service
  *        - 0x02: Secondary Service
  * @param max_attribute_records Maximum number of attribute records that can be
  *        added to this service
  * @param[out] service_handle Handle of the Service. When this service is added,
  *             a handle is allocated by the server for this service.  Server
  *             also allocates a range of handles for this service from
  *             serviceHandle to <serviceHandle + max_attr_records - 1>
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_add_service(uint8_t service_uuid_type,
                                  service_uuid_t *service_uuid,
                                  uint8_t service_type,
                                  uint8_t max_attribute_records,
                                  uint16_t *service_handle);
/**
  * @brief Include a service given by include_start_handle and include_end_handle
  *        to another  service given by service_handle. Attribute server creates
  *        an INCLUDE definition  attribute and return the handle of this
  *        attribute in Included_handle.
  * @param service_handle Handle of the Service to which another service has to
  *        be included.
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param include_start_handle Attribute Handle of the Service which has to be
  *        included in service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param include_end_handle End Handle of the Service which has to be included
  *        in service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param include_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param include_uuid See @ref include_uuid_t
  * @param[out] include_handle Handle of the include declaration
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_include_service(uint16_t service_handle,
                                      uint16_t include_start_handle,
                                      uint16_t include_end_handle,
                                      uint8_t include_uuid_type,
                                      include_uuid_t *include_uuid,
                                      uint16_t *include_handle);
/**
  * @brief Add a characteristic to a service.
  * @param service_handle Handle of the Service to which the characteristic will
  *        be added
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param char_uuid See @ref char_uuid_t
  * @param char_value_length Maximum length of the characteristic value.
  *        Values:
  *        - 0 ... 512
  * @param char_properties Characteristic Properties (Volume 3, Part G, section
  *        3.3.1.1 of Bluetooth Specification 4.1)
  *        Flags:
  *        - 0x00: CHAR_PROP_NONE
  *        - 0x01: CHAR_PROP_BROADCAST (Broadcast)
  *        - 0x02: CHAR_PROP_READ (Read)
  *        - 0x04: CHAR_PROP_WRITE_WITHOUT_RESP (Write w/o resp)
  *        - 0x08: CHAR_PROP_WRITE (Write)
  *        - 0x10: CHAR_PROP_NOTIFY (Notify)
  *        - 0x20: CHAR_PROP_INDICATE (Indicate)
  *        - 0x40: CHAR_PROP_SIGNED_WRITE (Authenticated Signed Writes)
  *        - 0x80: CHAR_PROP_EXT (Extended Properties)
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00: None
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x02: AUTHOR_READ (Need authorization to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x10: AUTHOR_WRITE (need authorization to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @param gatt_evt_mask GATT event mask.
  *        Flags:
  *        - 0x00: GATT_DONT_NOTIFY_EVENTS
  *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
  *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
  *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
  * @param enc_key_size Minimum encryption key size required to read the
  *        characteristic.
  *        Values:
  *        - 0x07 ... 0x10
  * @param is_variable Specify if the characteristic value has a fixed length or
  *        a variable length.
  *        Values:
  *        - 0x00: Fixed length
  *        - 0x01: Variable length
  * @param[out] char_handle Handle of the Characteristic that has been added.  It
  *             is the handle of the characteristic declaration.  The attribute
  *             that holds the characteristic value is allocated at the next
  *             handle,  followed by the Client Characteristic Configuration
  *             descriptor if the characteristic  has CHAR_PROP_NOTIFY or
  *             CHAR_PROP_INDICATE properties.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_add_char(uint16_t service_handle,
                               uint8_t char_uuid_type,
                               char_uuid_t *char_uuid,
                               uint16_t char_value_length,
                               uint8_t char_properties,
                               uint8_t security_permissions,
                               uint8_t gatt_evt_mask,
                               uint8_t enc_key_size,
                               uint8_t is_variable,
                               uint16_t *char_handle);
/**
  * @brief Add a characteristic descriptor to a service.
  * @param service_handle Handle of service to which the characteristic belongs
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_handle Handle of the characteristic to which description has to
  *        be added
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_desc_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param char_desc_uuid See @ref char_desc_uuid_t
  * @param char_desc_value_max_len The maximum length of the descriptor value
  *        Values:
  *        - 0 ... 512
  * @param char_desc_value_length Current Length of the characteristic descriptor
  *        value
  *        Values:
  *        - 0 ... 512
  * @param char_desc_value Value of the characteristic description
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00: None
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x02: AUTHOR_READ (Need authorization to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x10: AUTHOR_WRITE (need authorization to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @param access_permissions Access permission
  *        Flags:
  *        - 0x00: None
  *        - 0x01: READ
  *        - 0x02: WRITE
  *        - 0x04: WRITE_WO_RESP
  *        - 0x08: SIGNED_WRITE
  * @param gatt_evt_mask GATT event mask.
  *        Flags:
  *        - 0x00: GATT_DONT_NOTIFY_EVENTS
  *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
  *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
  *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
  * @param enc_key_size Minimum encryption key size required to read the
  *        characteristic.
  *        Values:
  *        - 0x07 ... 0x10
  * @param is_variable Specify if the characteristic value has a fixed length or
  *        a variable length.
  *        Values:
  *        - 0x00: Fixed length
  *        - 0x01: Variable length
  * @param[out] char_desc_handle Handle of the characteristic descriptor
  *             Values:
  *             - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_add_char_desc(uint16_t service_handle,
                                    uint16_t char_handle,
                                    uint8_t char_desc_uuid_type,
                                    char_desc_uuid_t *char_desc_uuid,
                                    uint8_t char_desc_value_max_len,
                                    uint8_t char_desc_value_length,
                                    uint8_t char_desc_value[],
                                    uint8_t security_permissions,
                                    uint8_t access_permissions,
                                    uint8_t gatt_evt_mask,
                                    uint8_t enc_key_size,
                                    uint8_t is_variable,
                                    uint16_t *char_desc_handle);
/**
  * @brief Update a characteristic value in a service.  If notifications (or
  *        indications) are enabled on that characteristic,  a notification (or
  *        indication) will be sent to the client after sending  this command to
  *        the BlueNRG. The command is queued into the BlueNRG command queue.  If
  *        the buffer is full, because previous commands could not be still
  *        processed, the function will return BLE_STATUS_INSUFFICIENT_RESOURCES.
  *        This will happen  if notifications (or indications) are enabled and
  *        the application calls  @ref aci_gatt_update_char_value at an higher
  *        rate than what is allowed by the link.  Throughput on BLE link depends
  *        on connection interval and connection length  parameters (decided by
  *        the master, see aci_l2cap_connection_parameter_update_request()  for
  *        more info on how to suggest new connection parameters from a slave).
  *        If the  application does not want to lose notifications because
  *        BlueNRG buffer becomes full,  it has to retry again till the function
  *        returns BLE_STATUS_SUCCESS or any other error code. DEPRECATED API
  *        (still supported but not recommended)
  * @param service_handle Handle of service to which the characteristic belongs
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_handle Handle of the characteristic
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset The offset from which the attribute value has to be
  *        updated.  If this is set to 0 and the attribute value is of variable
  *        length, then the length of the attribute will be set to the
  *        char_value_length.  If the val_offset is set to a value greater than
  *        0, then the length of the attribute will be set to the maximum length
  *        as  specified for the attribute while adding the characteristic.
  *        Values:
  *        - 0 ... 511
  * @param char_value_length Length of the characteristic value in octets
  * @param char_value Characteristic value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_update_char_value(uint16_t service_handle,
                                        uint16_t char_handle,
                                        uint8_t val_offset,
                                        uint8_t char_value_length,
                                        uint8_t char_value[]);
/**
  * @brief Delete the specified characteristic from the service.
  * @param serv_handle Handle of service to which the characteristic belongs
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_handle Handle of the characteristic which has to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_del_char(uint16_t serv_handle,
                               uint16_t char_handle);
/**
  * @brief Delete the specified service from the GATT server database.
  * @param serv_handle Handle of the service to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_del_service(uint16_t serv_handle);
/**
  * @brief Delete the Include definition from the service.
  * @param serv_handle Handle of the service to which the include service belongs
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param include_handle Handle of the included service which has to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_del_include_service(uint16_t serv_handle,
                                          uint16_t include_handle);
/**
  * @brief Mask events from the GATT. The default configuration is all the events
  *        masked.
  * @param gatt_evt_mask GATT/ATT event mask.
  *        Values:
  *        - 0x00000001: ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
  *        - 0x00000002: ACI_GATT_PROC_TIMEOUT_EVENT
  *        - 0x00000004: ACI_ATT_EXCHANGE_MTU_RESP_EVENT
  *        - 0x00000008: ACI_ATT_FIND_INFO_RESP_EVENT
  *        - 0x00000010: ACI_ATT_FIND_BY_TYPE_VALUE_RESP_EVENT
  *        - 0x00000020: ACI_ATT_READ_BY_TYPE_RESP_EVENT
  *        - 0x00000040: ACI_ATT_READ_RESP_EVENT
  *        - 0x00000080: ACI_ATT_READ_BLOB_RESP_EVENT
  *        - 0x00000100: ACI_ATT_READ_MULTIPLE_RESP_EVENT
  *        - 0x00000200: ACI_ATT_READ_BY_GROUP_TYPE_RESP_EVENT
  *        - 0x00000800: ACI_ATT_PREPARE_WRITE_RESP_EVENT
  *        - 0x00001000: ACI_ATT_EXEC_WRITE_RESP_EVENT
  *        - 0x00002000: ACI_GATT_INDICATION_EVENT
  *        - 0x00004000: ACI_GATT_NOTIFICATION_EVENT
  *        - 0x00008000: ACI_GATT_ERROR_RESP_EVENT
  *        - 0x00010000: ACI_GATT_PROC_COMPLETE_EVENT
  *        - 0x00020000: ACI_GATT_DISC_READ_CHAR_BY_UUID_RESP_EVENT
  *        - 0x00040000: ACI_GATT_TX_POOL_AVAILABLE_EVENT
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_set_event_mask(uint32_t gatt_evt_mask);
/**
  * @brief Perform an ATT MTU exchange procedure. When the ATT MTU exchange
  *        procedure is completed, a @ref aci_att_exchange_mtu_resp_event event
  *        is generated. A @ref aci_gatt_proc_complete_event event is also
  *        generated to indicate the end of the procedure.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_exchange_config(uint16_t connection_handle);
/**
  * @brief Send a Find Information Request. This command is used to obtain the
  *        mapping of attribute handles with their associated types. The
  *        responses of the procedure are given through the  @ref
  *        aci_att_find_info_resp_event event. The end of the procedure is
  *        indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle First requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle Last requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_find_info_req(uint16_t connection_handle,
                                   uint16_t start_handle,
                                   uint16_t end_handle);
/**
  * @brief Send a Find By Type Value Request The Find By Type Value Request is
  *        used to obtain the handles of attributes that have a given 16-bit UUID
  *        attribute type and a given attribute value. The responses of the
  *        procedure are given through the @ref
  *        aci_att_find_by_type_value_resp_event event. The end of the procedure
  *        is indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle First requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle Last requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid 2 octet UUID to find (little-endian)
  * @param attribute_val_length Length of attribute value (maximum value is
  *        ATT_MTU - 7).
  * @param attribute_val Attribute value to find
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_find_by_type_value_req(uint16_t connection_handle,
                                            uint16_t start_handle,
                                            uint16_t end_handle,
                                            uint16_t uuid,
                                            uint8_t attribute_val_length,
                                            uint8_t attribute_val[]);
/**
  * @brief Send a Read By Type Request. The Read By Type Request is used to
  *        obtain the values of attributes where the attribute type is known but
  *        the handle is not known. The responses of the procedure are given
  *        through the @ref aci_att_read_by_type_resp_event event. The end of the
  *        procedure is indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle First requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle Last requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_read_by_type_req(uint16_t connection_handle,
                                      uint16_t start_handle,
                                      uint16_t end_handle,
                                      uint8_t uuid_type,
                                      uuid_t *uuid);
/**
  * @brief Send a Read By Group Type Request.  The Read By Group Type Request is
  *        used to obtain the values of grouping attributes where the attribute
  *        type is known but the handle is not known. Grouping attributes are
  *        defined  at GATT layer. The grouping attribute types are: "Primary
  *        Service", "Secondary Service"  and "Characteristic".  The responses of
  *        the procedure are given through the @ref
  *        aci_att_read_by_group_type_resp_event event.  The end of the procedure
  *        is indicated by a @ref aci_gatt_proc_complete_event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle First requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle Last requested handle number
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_read_by_group_type_req(uint16_t connection_handle,
                                            uint16_t start_handle,
                                            uint16_t end_handle,
                                            uint8_t uuid_type,
                                            uuid_t *uuid);
/**
  * @brief Send a Prepare Write Request. The Prepare Write Request is used to
  *        request the server to prepare to write the value of an attribute.  The
  *        responses of the procedure are given through the @ref
  *        aci_att_prepare_write_resp_event event.  The end of the procedure is
  *        indicated by a @ref aci_gatt_proc_complete_event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset The offset of the first octet to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of attribute value (maximum value is
  *        ATT_MTU - 5).
  * @param attribute_val The value of the attribute to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_prepare_write_req(uint16_t connection_handle,
                                       uint16_t attr_handle,
                                       uint16_t val_offset,
                                       uint8_t attribute_val_length,
                                       uint8_t attribute_val[]);
/**
  * @brief Send an Execute Write Request. The Execute Write Request is used to
  *        request the server to write or cancel the write  of all the prepared
  *        values currently held in the prepare queue from this client.  The
  *        result of the procedure is given through the @ref
  *        aci_att_exec_write_resp_event event.  The end of the procedure is
  *        indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param execute Execute or cancel writes.
  *        Values:
  *        - 0x00: Cancel all prepared writes
  *        - 0x01: Immediately write all pending prepared values
  * @retval Value indicating success or error code.
  */
ble_status_t aci_att_execute_write_req(uint16_t connection_handle,
                                       uint8_t execute);
/**
  * @brief Start the GATT client procedure to discover all primary services on
  *        the server. The responses of the procedure are given through the @ref
  *        aci_att_read_by_group_type_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_disc_all_primary_services(uint16_t connection_handle);
/**
  * @brief Start the procedure to discover the primary services of the specified
  *        UUID on the server. The responses of the procedure are given through
  *        the @ref aci_att_find_by_type_value_resp_event event. The end of the
  *        procedure is indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_disc_primary_service_by_uuid(uint16_t connection_handle,
                                                   uint8_t uuid_type,
                                                   uuid_t *uuid);
/**
  * @brief Start the procedure to find all included services. The responses of
  *        the procedure are given through the @ref
  *        aci_att_read_by_type_resp_event event. The end of the procedure is
  *        indicated by a @ref aci_gatt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_find_included_services(uint16_t connection_handle,
                                             uint16_t start_handle,
                                             uint16_t end_handle);
/**
  * @brief Start the procedure to discover all the characteristics of a given
  *        service. When the procedure is completed, a @ref
  *        aci_gatt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_read_by_type_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_disc_all_char_of_service(uint16_t connection_handle,
                                               uint16_t start_handle,
                                               uint16_t end_handle);
/**
  * @brief Start the procedure to discover all the characteristics specified by a
  *        UUID. When the procedure is completed, a @ref
  *        aci_gatt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_gatt_disc_read_char_by_uuid_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_disc_char_by_uuid(uint16_t connection_handle,
                                        uint16_t start_handle,
                                        uint16_t end_handle,
                                        uint8_t uuid_type,
                                        uuid_t *uuid);
/**
  * @brief Start the procedure to discover all characteristic descriptors on the
  *        server. When the procedure is completed, a @ref
  *        aci_gatt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_find_info_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param char_handle Handle of the characteristic value
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End handle of the characteristic
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_disc_all_char_desc(uint16_t connection_handle,
                                         uint16_t char_handle,
                                         uint16_t end_handle);
/**
  * @brief Start the procedure to read the attribute value. When the procedure is
  *        completed, a @ref aci_gatt_proc_complete_event event is generated.
  *        Before procedure completion the response packet is given through @ref
  *        aci_att_read_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_char_value(uint16_t connection_handle,
                                      uint16_t attr_handle);
/**
  * @brief Start the procedure to read all the characteristics specified by the
  *        UUID. When the procedure is completed, a @ref
  *        aci_gatt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_gatt_disc_read_char_by_uuid_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Starting handle of the range to be searched
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End handle of the range to be searched
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_using_char_uuid(uint16_t connection_handle,
                                           uint16_t start_handle,
                                           uint16_t end_handle,
                                           uint8_t uuid_type,
                                           uuid_t *uuid);
/**
  * @brief Start the procedure to read a long characteristic value. the procedure
  *        is completed, a @ref aci_gatt_proc_complete_event event is generated.
  *        Before procedure completion the response packets are given through
  *        @ref aci_att_read_blob_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset from which the value needs to be read
  *        Values:
  *        - 0 ... 511
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_long_char_value(uint16_t connection_handle,
                                           uint16_t attr_handle,
                                           uint16_t val_offset);
/**
  * @brief Start a procedure to read multiple characteristic values from a
  *        server. This sub-procedure is used to read multiple Characteristic
  *        Values from a server when the client knows the Characteristic Value
  *        Handles. When the procedure is completed, a @ref
  *        aci_gatt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_read_multiple_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param number_of_handles The number of handles for which the value has to be
  *        read. From 2 to (ATT_MTU-1)/2
  *        Values:
  *        - 0x02 ... 0xFF
  * @param handle_entry See @ref handle_entry_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_multiple_char_value(uint16_t connection_handle,
                                               uint8_t number_of_handles,
                                               handle_entry_t handle_entry[]);
/**
  * @brief Start the procedure to write a long characteristic value. When the
  *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
  *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
  *        and @ref aci_att_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_char_value(uint16_t connection_handle,
                                       uint16_t attr_handle,
                                       uint8_t attribute_val_length,
                                       uint8_t attribute_val[]);
/**
  * @brief Start the procedure to write a long characteristic value. When the
  *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
  *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
  *        and @ref aci_att_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset at which the attribute has to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_long_char_value(uint16_t connection_handle,
                                            uint16_t attr_handle,
                                            uint16_t val_offset,
                                            uint8_t attribute_val_length,
                                            uint8_t attribute_val[]);
/**
  * @brief Start the procedure to write a characteristic reliably. When the
  *        procedure is completed, a  @ref aci_gatt_proc_complete_event event is
  *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
  *        and @ref aci_att_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset at which the attribute has to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_char_reliable(uint16_t connection_handle,
                                          uint16_t attr_handle,
                                          uint16_t val_offset,
                                          uint8_t attribute_val_length,
                                          uint8_t attribute_val[]);
/**
  * @brief Start the procedure to write a long characteristic descriptor. When
  *        the procedure is completed, a @ref aci_gatt_proc_complete_event event
  *        is generated. During the procedure, @ref
  *        aci_att_prepare_write_resp_event and @ref
  *        aci_att_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset at which the attribute has to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_long_char_desc(uint16_t connection_handle,
                                           uint16_t attr_handle,
                                           uint16_t val_offset,
                                           uint8_t attribute_val_length,
                                           uint8_t attribute_val[]);
/**
  * @brief Start the procedure to read a long characteristic value. When the
  *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
  *        generated. Before procedure completion the response packets are given
  *        through @ref aci_att_read_blob_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the characteristic descriptor
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset from which the value needs to be read
  *        Values:
  *        - 0 ... 511
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_long_char_desc(uint16_t connection_handle,
                                          uint16_t attr_handle,
                                          uint16_t val_offset);
/**
  * @brief Start the procedure to write a characteristic descriptor. When the
  *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
  *        generated.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_char_desc(uint16_t connection_handle,
                                      uint16_t attr_handle,
                                      uint8_t attribute_val_length,
                                      uint8_t attribute_val[]);
/**
  * @brief Start the procedure to read the descriptor specified. When the
  *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
  *        generated. Before procedure completion the response packet is given
  *        through @ref aci_att_read_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the descriptor to be read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_char_desc(uint16_t connection_handle,
                                     uint16_t attr_handle);
/**
  * @brief Start the procedure to write a characteristic value without waiting
  *        for any response from the server. No events are generated after this
  *        command is executed.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written (maximum value
  *        is ATT_MTU - 3)
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_without_resp(uint16_t connection_handle,
                                         uint16_t attr_handle,
                                         uint8_t attribute_val_length,
                                         uint8_t attribute_val[]);
/**
  * @brief Start a signed write without response from the server. The procedure
  *        is used to write a characteristic value with an authentication
  *        signature without waiting for any response from the server. It cannot
  *        be used when the link is encrypted.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written (up to ATT_MTU
  *        - 13)
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_signed_write_without_resp(uint16_t connection_handle,
                                                uint16_t attr_handle,
                                                uint8_t attribute_val_length,
                                                uint8_t attribute_val[]);
/**
  * @brief Allow application to confirm indication. This command has to be sent
  *        when the application receives the event @ref
  *        aci_gatt_indication_event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_confirm_indication(uint16_t connection_handle);
/**
  * @brief Allow or reject a write request from a client. This command has to be
  *        sent by the application when it receives the @ref
  *        aci_gatt_write_permit_req_event. If the write can be allowed, then the
  *        status and error code has to be set to 0. If the write cannot be
  *        allowed, then the status has to be set to 1 and the error code has to
  *        be set to the error code that has to be passed to the client.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute that was passed in the event
  *        EVT_BLUE_GATT_WRITE_PERMIT_REQ
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param write_status If the value can be written or not.
  *        Values:
  *        - 0x00: The value can be written to the attribute specified by attr_handle
  *        - 0x01: The value cannot be written to the attribute specified by the attr_handle
  * @param error_code The error code that has to be passed to the client in case
  *        the write has to be rejected
  *        Values:
  *        - 0x80 ... 0x9F: Application Error
  *        - 0xE0 ... 0xFF: Profile Error
  * @param attribute_val_length Length of the value to be written as passed in
  *        the event EVT_BLUE_GATT_WRITE_PERMIT_REQ
  * @param attribute_val Value as passed in the event
  *        EVT_BLUE_GATT_WRITE_PERMIT_REQ
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_write_resp(uint16_t connection_handle,
                                 uint16_t attr_handle,
                                 uint8_t write_status,
                                 uint8_t error_code,
                                 uint8_t attribute_val_length,
                                 uint8_t attribute_val[]);
/**
  * @brief Allow the GATT server to send a response to a read request from a
  *        client. The application has to send this command when it receives the
  *        @ref aci_gatt_read_permit_req_event or @ref
  *        aci_gatt_read_multi_permit_req_event. This command indicates to the
  *        stack that the response can be sent to the client. So if the
  *        application wishes to update any of the attributes before they are
  *        read by the client, it has to update the characteristic values using
  *        the @ref aci_gatt_update_char_value and then give this command. The
  *        application should perform the required operations within 30 seconds.
  *        Otherwise the GATT procedure will be timeout.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_allow_read(uint16_t connection_handle);
/**
  * @brief This command sets the security permission for the attribute handle
  *        specified. Currently the setting of security permission is allowed
  *        only for client configuration descriptor.
  * @param serv_handle Handle of the service which contains the attribute whose
  *        security permission has to be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attr_handle Handle of the attribute whose security permission has to
  *        be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00: None
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x02: AUTHOR_READ (Need authorization to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x10: AUTHOR_WRITE (need authorization to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_set_security_permission(uint16_t serv_handle,
                                              uint16_t attr_handle,
                                              uint8_t security_permissions);
/**
  * @brief This command sets the value of the descriptor specified by
  *        charDescHandle.
  * @param serv_handle Handle of the service which contains the characteristic
  *        descriptor
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_handle Handle of the characteristic which contains the descriptor
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_desc_handle Handle of the descriptor whose value has to be set
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset from which the descriptor value has to be updated
  *        Values:
  *        - 0 ... 511
  * @param char_desc_value_length Length of the descriptor value.
  * @param char_desc_value Descriptor value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_set_desc_value(uint16_t serv_handle,
                                     uint16_t char_handle,
                                     uint16_t char_desc_handle,
                                     uint16_t val_offset,
                                     uint8_t char_desc_value_length,
                                     uint8_t char_desc_value[]);
/**
  * @brief Reads the value of the attribute handle specified from the local GATT
  *        database.
  * @param attr_handle Handle of the attribute to read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param offset Offset from which the value needs to be read
  *        Values:
  *        - 0 ... 511
  * @param value_length_requested Maximum number of octets to be returned as
  *        attribute value
  *        Values:
  *        - 0 ... 512
  * @param[out] length Length of the attribute value
  * @param[out] value_length Length in octets of the Value parameter
  * @param[out] value Attribute value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_read_handle_value(uint16_t attr_handle,
                                        uint16_t offset,
                                        uint16_t value_length_requested,
                                        uint16_t *length,
                                        uint16_t *value_length,
                                        uint8_t value[]);
/**
  * @brief This command is a more flexible version of @ref
  *        aci_gatt_update_char_value                       to support update of
  *        long attribute up to 512 bytes and indicate selectively the generation
  *        of Indication/Notification.
  * @param conn_handle_to_notify Connection handle to notify. Notify all
  *        subscribed clients if equal to 0x0000: DEPRECATED feature (still
  *        supported but not recommended).
  * @param service_handle Handle of service to which the characteristic belongs
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_handle Handle of the characteristic
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param update_type Allow Notification or Indication generation, if enabled in
  *        the client characteristic configuration descriptor. If bit 3 is set,
  *        standard BLE Link Layer retransmission mechanism for notifications
  *        PDUs si disabled: PDUs will be transmitted only once, even if they
  *        have not been acknowledged.
  *        Flags:
  *        - 0x00: GATT_LOCAL_UPDATE
  *        - 0x01: GATT_NOTIFICATION
  *        - 0x02: GATT_INDICATION
  *        - 0x04: GATT_DISABLE_RETRANSMISSIONS
  * @param char_length Total length of the characteristic value. In case of a
  *        variable size characteristic, this field specifies the new length of
  *        the characteristic value after the update; in case of fixed length
  *        characteristic this field is ignored.
  *        Values:
  *        - 0 ... 512
  * @param value_offset The offset from which the attribute value has to be
  *        updated.
  *        Values:
  *        - 0 ... 511
  * @param value_length Length of the Value parameter in octets
  * @param value Updated characteristic value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_update_char_value_ext(uint16_t conn_handle_to_notify,
                                            uint16_t service_handle,
                                            uint16_t char_handle,
                                            uint8_t update_type,
                                            uint16_t char_length,
                                            uint16_t value_offset,
                                            uint8_t value_length,
                                            uint8_t value[]);
/**
  * @brief Deny the GATT server to send a response to a read request from a
  *        client. The application may send this command when it receives the
  *        @ref aci_gatt_read_permit_req_event or  @ref
  *        aci_gatt_read_multi_permit_req_event. This command indicates to the
  *        stack that the client is not allowed to read the requested
  *        characteristic due to e.g. application restrictions. The Error code
  *        shall be either 0x08 (Insufficient Authorization) or a value in the
  *        range 0x80-0x9F (Application Error). The application should issue the
  *        @ref aci_gatt_deny_read  or @ref aci_gatt_allow_read command within 30
  *        seconds from the reception of the @ref aci_gatt_read_permit_req_event
  *        or  @ref aci_gatt_read_multi_permit_req_event events otherwise the
  *        GATT procedure will issue a timeout.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param error_code Error code for the command
  *        Values:
  *        - 0x08: Insufficient Authorization
  *        - 0x80 ... 0x9F: Application Error
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_deny_read(uint16_t connection_handle,
                                uint8_t error_code);
/**
  * @brief This command sets the access permission for the attribute handle
  *        specified.
  * @param serv_handle Handle of the service which contains the attribute whose
  *        access permission has to be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attr_handle Handle of the attribute whose security permission has to
  *        be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param access_permissions Access permission
  *        Values:
  *        - 0x00: None
  *        - 0x01: READ
  *        - 0x02: WRITE
  *        - 0x04: WRITE_NO_RESP
  *        - 0x08: SIGNED_WRITE
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_set_access_permission(uint16_t serv_handle,
                                            uint16_t attr_handle,
                                            uint8_t access_permissions);
/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

#ifdef __cplusplus
}
#endif

#endif /* _BLUENRG1_GATT_ACI_H_ */
