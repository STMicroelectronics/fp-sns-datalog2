/**
  ******************************************************************************
  * @file    bluenrg_lp_l2cap_aci.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version 2.0.0
  * @date    25-September-2024
  * @brief   Header file for external uC - BlueNRG-x in network coprocessor mode (l2cap_aci)
  *          Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef _BLUENRG_LP_L2CAP_ACI_H_
#define _BLUENRG_LP_L2CAP_ACI_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "bluenrg_lp_types.h"
/**
  * @brief Send an L2CAP connection parameter update request from the slave to
  *        the master. An @ref aci_l2cap_connection_update_resp_event event will
  *        be raised when the master will respond to the  request (accepts or
  *        rejects).
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param conn_interval_min Minimum value for the connection event interval.
  *        This shall be less than or equal to conn_interval_max. Time = N * 1.25
  *        msec.
  *        Values:
  *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
  * @param conn_interval_max Maximum value for the connection event interval.
  *        This shall be greater than or equal to conn_interval_min. Time = N *
  *        1.25 msec.
  *        Values:
  *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
  * @param slave_latency Slave latency for the connection in number of connection
  *        events.
  *        Values:
  *        - 0x0000 ... 0x01F3
  * @param timeout_multiplier Defines connection timeout parameter in the
  *        following manner: Timeout Multiplier * 10ms.
  *        Values:
  *        - 10 (100 ms)  ... 3200 (32000 ms)
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_connection_parameter_update_req(uint16_t connection_handle,
                                                       uint16_t conn_interval_min,
                                                       uint16_t conn_interval_max,
                                                       uint16_t slave_latency,
                                                       uint16_t timeout_multiplier);
/**
  * @brief Accept or reject a connection update. This command should be sent in
  *        response to a @ref aci_l2cap_connection_update_req_event event from
  *        the controller. The accept parameter has to be set if the connection
  *        parameters given in the event are acceptable.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param conn_interval_min Minimum value for the connection event interval.
  *        This shall be less than or equal to conn_interval_max. Time = N * 1.25
  *        msec.
  *        Values:
  *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
  * @param conn_interval_max Maximum value for the connection event interval.
  *        This shall be greater than or equal to conn_interval_min. Time = N *
  *        1.25 msec.
  *        Values:
  *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
  * @param slave_latency Slave latency for the connection in number of connection
  *        events.
  *        Values:
  *        - 0x0000 ... 0x01F3
  * @param timeout_multiplier Defines connection timeout parameter in the
  *        following manner: Timeout Multiplier * 10ms.
  *        Values:
  *        - 10 (100 ms)  ... 3200 (32000 ms)
  * @param minimum_ce_length Information parameter about the minimum length of
  *        connection needed for this LE connection. Time = N * 0.625 msec.
  * @param maximum_ce_length Information parameter about the maximum length of
  *        connection needed for this LE connection. Time = N * 0.625 msec.
  * @param identifier Identifier received in ACI_L2CAP_Connection_Update_Req
  *        event.
  * @param accept Specify if connection update parameters are acceptable or not.
  *        Values:
  *        - 0x00: Reject
  *        - 0x01: Accept
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_connection_parameter_update_resp(uint16_t connection_handle,
                                                        uint16_t conn_interval_min,
                                                        uint16_t conn_interval_max,
                                                        uint16_t slave_latency,
                                                        uint16_t timeout_multiplier,
                                                        uint16_t minimum_ce_length,
                                                        uint16_t maximum_ce_length,
                                                        uint8_t identifier,
                                                        uint8_t accept);
/**
  * @brief Create and configure an L2CAP channel between two devices using LE
  *        Credit Based Flow Control mode.
  * @param connection_handle Handle identifying the connection.
  * @param spsm Simplified Protocol/Service Multiplexer
  *        Values:
  *        - 0x0001 ... 0x00FF
  * @param cid It represents the channel endpoint on the device sending the
  *        request and receiving the response.
  *        Values:
  *        - 0x0001 ... 0x00FF
  * @param mtu The maximum SDU size (in octets) that the L2CAP layer entity
  *        sending the L2CAP_LE_CREDIT_BASED_CONNECTION_REQ can receive on this
  *        channel.
  *        Values:
  *        - 23 ... 65535
  * @param mps The maximum PDU payload size (in octets) that the L2CAP layer
  *        entity sending the L2CAP_LE_CREDIT_BASED_CONNECTION_REQ is capable of
  *        receiving on this channel.
  *        Values:
  *        - 23 ... 65533
  * @param cfc_policy Policy to handle flow control. If 0, flow control is
  *        handled by application: credits must be sent using
  *        aci_l2cap_send_flow_control_credits(). If 1, flow control is handled
  *        automatically by the stack.
  *        Values:
  *        - 0x00: L2CAP_CFC_MANUAL
  *        - 0x01: L2CAP_CFC_AUTO
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_cfc_connection_req_nwk(uint16_t connection_handle,
                                              uint16_t spsm,
                                              uint16_t cid,
                                              uint16_t mtu,
                                              uint16_t mps,
                                              uint8_t cfc_policy);
/**
  * @brief Command to be sent to respond to a request to open an L2CAP channel
  *        using LE Credit based Flow Control (the request is notified through
  *        aci_l2cap_cfc_channel_connection_event()).
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param identifier Identifier of the request.
  * @param cid The cid represents the local channel endpoint on the device.
  * @param mtu The MTU field specifies the maximum SDU size (in octets) that the
  *        L2CAP layer entity sending the L2CAP_LE_CREDIT_BASED_CONNECTION_RSP
  *        can receive on this channel.
  *        Values:
  *        - 23 ... 65535
  * @param mps The MPS field specifies the maximum PDU payload size (in octets)
  *        that the L2CAP layer entity sending the
  *        L2CAP_LE_CREDIT_BASED_CONNECTION_RSP is capable of receiving on this
  *        channel.
  *        Values:
  *        - 23 ... 65533
  * @param result It indicates the outcome of the connection request. A result
  *        value of 0x0000 indicates success while a non-zero value indicates the
  *        connection request was refused.
  *        Values:
  *        - 0x0000: L2CAP_CONN_SUCCESSFUL
  *        - 0x0002: L2CAP_SPSM_NOT_SUPPORTED
  *        - 0x0004: L2CAP_NO_RESOURCE_AVAILABLE
  *        - 0x0005: L2CAP_INSUFFICIENT_AUTHENTICATION
  *        - 0x0006: L2CAP_INSUFFICIENT_AUTHORIZATION
  *        - 0x0007: L2CAP_INSUFFICIENT_ENCRYPTION_KEY_SIZE
  *        - 0x0008: L2CAP_INSUFFICIENT_ENCRYPTION
  *        - 0x0009: L2CAP_INVALID_SOURCE_CID
  *        - 0x000A: L2CAP_SOURCE_CID_ALREADY_ALLOCATED
  *        - 0x000B: L2CAP_UNACCEPTABLE_PARAMETERS
  * @param cfc_policy Policy to handle flow control. If 0, flow control is
  *        handled by application: credits must be sent using
  *        aci_l2cap_send_flow_control_credits(). If 1, flow control is handled
  *        automatically by the stack.
  *        Values:
  *        - 0x00: L2CAP_CFC_MANUAL
  *        - 0x01: L2CAP_CFC_AUTO
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_cfc_connection_resp_nwk(uint16_t connection_handle,
                                               uint8_t identifier,
                                               uint16_t cid,
                                               uint16_t mtu,
                                               uint16_t mps,
                                               uint16_t result,
                                               uint8_t cfc_policy);
/**
  * @brief Command to be issued when the device is capable of receiving
  *        additional K-frames in LE Credit Based Flow Control mode.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param cid The local channel endpoint that identifies the L2CAP channel.
  * @param rx_credits Additional number of K-frames that local L2CAP layer entity
  *        can currently receive from the peer.
  * @param cfc_policy Policy to handle flow control. If 0, flow control is
  *        handled by application: credits must be sent using
  *        aci_l2cap_send_flow_control_credits(). If 1, flow control is handled
  *        automatically by the stack.
  *        Values:
  *        - 0x00: L2CAP_CFC_MANUAL
  *        - 0x01: L2CAP_CFC_AUTO
  * @param[out] rx_credit_balance Current number of K-frames that peer's L2CAP
  *             layer entity can send.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_send_flow_control_credits(uint16_t connection_handle,
                                                 uint16_t cid,
                                                 uint16_t rx_credits,
                                                 uint8_t cfc_policy,
                                                 uint16_t *rx_credit_balance);
/**
  * @brief Command to terminate an L2CAP channel.
  * @param connection_handle
  * @param cid Local endpoint of the channel to be disconnected.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_disconnect(uint16_t connection_handle,
                                  uint16_t cid);
/**
  * @brief Function to be called to send an SDU using an  L2CAP channel in LE
  *        Credit Based Flow Control mode. An ACI_L2CAP_SDU_DATA_TX_NWK_EVENT is
  *        raised when the SDU has been processed.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param cid The local channel endpoint that identifies the L2CAP channel.
  * @param sdu_length Length of the SDU to be transmitted.
  * @param sdu_data Data contained in the SDU to be transmitted. Data must be
  *        valid until the SDU is transmitted.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_l2cap_transmit_sdu_data_nwk(uint16_t connection_handle,
                                             uint16_t cid,
                                             uint16_t sdu_length,
                                             uint8_t sdu_data[]);
/**
     * @}
     */

#ifdef __cplusplus
}
#endif

#endif /* _BLUENRG_LP_L2CAP_ACI_H_ */
