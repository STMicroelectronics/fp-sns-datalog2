/**
  ******************************************************************************
  * @file    bluenrg_lp_gatt_aci.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version 2.0.0
  * @date    25-September-2024
  * @brief   Header file for external uC - BlueNRG-x in network coprocessor
  *          mode (gatt_aci). Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef _BLUENRG_LP_GATT_ACI_H_
#define _BLUENRG_LP_GATT_ACI_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "bluenrg_lp_types.h"
/** Documentation for C union service_uuid_t */
typedef union service_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t service_uuid_16;
  /** 128-bit UUID
   */
  uint8_t service_uuid_128[16];
} service_uuid_t;
/** Documentation for C union char_uuid_t */
typedef union char_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} char_uuid_t;
/** Documentation for C union char_desc_uuid_t */
typedef union char_desc_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} char_desc_uuid_t;
/** Documentation for C union uuid_t */
typedef union uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t uuid_16;
  /** 128-bit UUID
   */
  uint8_t uuid_128[16];
} uuid_t;
/** Documentation for C struct handle_entry_t */
typedef struct handle_entry_t_s
{
  /** The handles for which the attribute value has to be read
    *  Values:
    *  - 0x0001 ... 0xFFFF
    */
  uint16_t handle;
} handle_entry_t;
/**
  * @brief Adds the GATT service to the database.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_init(void);
/**
  * @brief Adds a service to GATT Server. When a service is created, the host may
  *        reserve a range of handles for this service. The handle for the
  *        created service is returned.
  * @param service_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param Service_UUID See @ref service_uuid_t
  * @param service_type Service type.
  *        Values:
  *        - 0x01: Primary Service
  *        - 0x02: Secondary Service
  * @param max_attribute_records Number of handles reserved for the service. If
  *        0, no handles are served and when the next service is added to the
  *        GATT database, the first available handle is assigned to that service
  *        (this means that no more attributes can be assigned to the previously
  *        created service).
  * @param[out] service_handle Handle of the Service. When this service is added,
  *             a handle is allocated by the server for this service.  Server
  *             also allocates a range of handles for this service from
  *             serviceHandle to <serviceHandle + max_attr_records - 1>
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_add_service_nwk(uint8_t service_uuid_type,
                                          service_uuid_t *Service_UUID,
                                          uint8_t service_type,
                                          uint8_t max_attribute_records,
                                          uint16_t *service_handle);
/**
  * @brief Includes a service given by Included_Handle to another  service given
  *        by service_handle. Attribute server creates an Include definition
  *        attribute and returns the handle of this attribute.
  * @param service_handle Handle of the Service to which another service has to
  *        be included.
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param included_service_handle Attribute Handle of the Service which has to
  *        be included in service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param[out] include_handle Handle of the include declaration
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_include_service_nwk(uint16_t service_handle,
                                              uint16_t included_service_handle,
                                              uint16_t *include_handle);
/**
  * @brief Adds a characteristic to a service.
  * @param service_handle Handle of the Service to which the characteristic will
  *        be added.
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param char_uuid See @ref char_uuid_t
  * @param char_value_length Maximum length of the characteristic value.
  *        Values:
  *        - 0 ... 512
  * @param char_properties Characteristic Properties (Volume 3, Part G, section
  *        3.3.1.1 of Bluetooth Specification 4.1)
  *        Flags:
  *        - 0x00: CHAR_PROP_NONE
  *        - 0x01: CHAR_PROP_BROADCAST (Broadcast)
  *        - 0x02: CHAR_PROP_READ (Read)
  *        - 0x04: CHAR_PROP_WRITE_WITHOUT_RESP (Write w/o resp)
  *        - 0x08: CHAR_PROP_WRITE (Write)
  *        - 0x10: CHAR_PROP_NOTIFY (Notify)
  *        - 0x20: CHAR_PROP_INDICATE (Indicate)
  *        - 0x40: CHAR_PROP_SIGNED_WRITE (Authenticated Signed Writes)
  *        - 0x80: CHAR_PROP_EXT (Extended Properties)
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @param gatt_evt_mask GATT event mask. - GATT_NOTIFY_ATTRIBUTE_WRITE:
  *        aci_gatt_srv_attribute_modified_event() is generated when
  *        characteristic value is modified. -
  *        GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP:
  *        aci_gatt_srv_authorize_nwk_event() is generated when a write operation
  *        is received on the characteristic value. -
  *        GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP:
  *        aci_gatt_srv_authorize_nwk_event() is generated when a read request is
  *        received on the characteristic value.
  *        Flags:
  *        - 0x00: GATT_DONT_NOTIFY_EVENTS
  *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
  *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
  *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
  * @param enc_key_size Minimum encryption key size required to read the
  *        characteristic.
  *        Values:
  *        - 0x07 ... 0x10
  * @param is_variable Specify if the characteristic value has a fixed length or
  *        a variable length.
  *        Values:
  *        - 0x00: Fixed length
  *        - 0x01: Variable length
  * @param[out] char_handle Handle of the Characteristic that has been added.  It
  *             is the handle of the characteristic declaration.  The attribute
  *             that holds the characteristic value is allocated at the next
  *             handle,  followed by the Client Characteristic Configuration
  *             descriptor if the characteristic  has CHAR_PROP_NOTIFY or
  *             CHAR_PROP_INDICATE properties.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_add_char_nwk(uint16_t service_handle,
                                       uint8_t char_uuid_type,
                                       char_uuid_t *char_uuid,
                                       uint16_t char_value_length,
                                       uint8_t char_properties,
                                       uint8_t security_permissions,
                                       uint8_t gatt_evt_mask,
                                       uint8_t enc_key_size,
                                       uint8_t is_variable,
                                       uint16_t *char_handle);
/**
  * @brief Adds a characteristic descriptor to a characteristic.
  * @param char_handle Handle of the characteristic to which description has to
  *        be added
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param char_desc_uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param char_desc_uuid See @ref char_desc_uuid_t
  * @param char_desc_value_max_len The maximum length of the descriptor value
  *        Values:
  *        - 0 ... 512
  * @param char_desc_value_length Current Length of the characteristic descriptor
  *        value
  *        Values:
  *        - 0 ... 512
  * @param char_desc_value Value of the characteristic description
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @param access_permissions Access permission
  *        Flags:
  *        - 0x00: None
  *        - 0x01: READ
  *        - 0x02: WRITE
  *        - 0x04: WRITE_WO_RESP
  *        - 0x08: SIGNED_WRITE
  * @param gatt_evt_mask GATT event mask. - GATT_NOTIFY_ATTRIBUTE_WRITE:
  *        aci_gatt_srv_attribute_modified_event() is generated when
  *        characteristic value is modified. -
  *        GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP:
  *        aci_gatt_srv_authorize_nwk_event() is generated when a write operation
  *        is received on the characteristic value. -
  *        GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP:
  *        aci_gatt_srv_authorize_nwk_event() is generated when a read request is
  *        received on the characteristic value.
  *        Flags:
  *        - 0x00: GATT_DONT_NOTIFY_EVENTS
  *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
  *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
  *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
  * @param enc_key_size Minimum encryption key size required to read the
  *        characteristic.
  *        Values:
  *        - 0x07 ... 0x10
  * @param is_variable Specify if the characteristic value has a fixed length or
  *        a variable length.
  *        Values:
  *        - 0x00: Fixed length
  *        - 0x01: Variable length
  * @param[out] char_desc_handle Handle of the characteristic descriptor
  *             Values:
  *             - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_add_char_desc_nwk(uint16_t char_handle,
                                            uint8_t char_desc_uuid_type,
                                            char_desc_uuid_t *char_desc_uuid,
                                            uint16_t char_desc_value_max_len,
                                            uint16_t char_desc_value_length,
                                            uint8_t char_desc_value[],
                                            uint8_t security_permissions,
                                            uint8_t access_permissions,
                                            uint8_t gatt_evt_mask,
                                            uint8_t enc_key_size,
                                            uint8_t is_variable,
                                            uint16_t *char_desc_handle);
/**
  * @brief Updates an attribute value.
  * @param attr_handle Handle of the attribute
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset The offset from which the attribute value has to be
  *        updated.  If this is set to 0 and the attribute value is of variable
  *        length, then the length of the attribute will be set to the
  *        char_value_length.  If the val_offset is set to a value greater than
  *        0, then the length of the attribute will be set to the maximum length
  *        as  specified for the attribute while adding the characteristic.
  *        Values:
  *        - 0 ... 511
  * @param value_length Length of the attribute value in octets
  * @param value Attribute value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_write_handle_value_nwk(uint16_t attr_handle,
                                                 uint16_t val_offset,
                                                 uint16_t value_length,
                                                 uint8_t value[]);
/**
  * @brief Deletes the specified characteristic from the service.
  * @param char_handle Handle of the characteristic which has to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_rm_char_nwk(uint16_t char_handle);
/**
  * @brief Deletes the specified service from the GATT server database.
  * @param serv_handle Handle of the service to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_rm_service_nwk(uint16_t serv_handle);
/**
  * @brief Deletes the include definition from the service.
  * @param include_handle Handle of the included service which has to be deleted
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_rm_include_service_nwk(uint16_t include_handle);
/**
  * @brief Masks events from the GATT. The default configuration is all the
  *        events unmasked (enabled).
  * @param gatt_evt_mask GATT/ATT event mask.
  *        Values:
  *        - 0x00000001: ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
  *        - 0x00000002: ACI_GATT_PROC_TIMEOUT_EVENT
  *        - 0x00000004: ACI_ATT_EXCHANGE_MTU_RESP_EVENT
  *        - 0x00000008: ACI_ATT_FIND_INFO_RESP_EVENT
  *        - 0x00000010: ACI_ATT_FIND_BY_TYPE_VALUE_RESP_EVENT
  *        - 0x00000020: ACI_ATT_READ_BY_TYPE_RESP_EVENT
  *        - 0x00000040: ACI_ATT_READ_RESP_EVENT
  *        - 0x00000080: ACI_ATT_READ_BLOB_RESP_EVENT
  *        - 0x00000100: ACI_ATT_READ_MULTIPLE_RESP_EVENT
  *        - 0x00000200: ACI_ATT_READ_BY_GROUP_TYPE_RESP_EVENT
  *        - 0x00000800: ACI_ATT_PREPARE_WRITE_RESP_EVENT
  *        - 0x00001000: ACI_ATT_EXEC_WRITE_RESP_EVENT
  *        - 0x00002000: ACI_GATT_INDICATION_EVENT
  *        - 0x00004000: ACI_GATT_NOTIFICATION_EVENT
  *        - 0x00008000: ACI_GATT_ERROR_RESP_EVENT
  *        - 0x00010000: ACI_GATT_PROC_COMPLETE_EVENT
  *        - 0x00020000: ACI_GATT_DISC_READ_CHAR_BY_UUID_RESP_EVENT
  *        - 0x00040000: ACI_GATT_TX_POOL_AVAILABLE_EVENT
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_set_event_mask(uint32_t gatt_evt_mask);
/**
  * @brief Performs an ATT MTU exchange procedure. When the ATT MTU exchange
  *        procedure is completed, a @ref aci_att_exchange_mtu_resp_event event
  *        is generated. A @ref aci_gatt_clt_proc_complete_event event is also
  *        generated to indicate the end of the procedure.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_exchange_config(uint16_t connection_handle);
/**
  * @brief Sends a Prepare Write Request. The Prepare Write Request is used to
  *        request the server to prepare to write the value of an attribute.  The
  *        responses of the procedure are given through the @ref
  *        aci_att_clt_prepare_write_resp_event event.  The end of the procedure
  *        is indicated by a @ref aci_gatt_clt_proc_complete_event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset The offset of the first octet to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of attribute value (maximum value is
  *        ATT_MTU - 5).
  * @param attribute_val The value of the attribute to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_prepare_write_req(uint16_t connection_handle,
                                            uint16_t attr_handle,
                                            uint16_t val_offset,
                                            uint16_t attribute_val_length,
                                            uint8_t attribute_val[]);
/**
  * @brief Sends an Execute Write Request. The Execute Write Request is used to
  *        request the server to write or cancel the write of all the prepared
  *        values currently held in the prepare queue from this client.  The
  *        result of the procedure is given through the @ref
  *        aci_att_clt_exec_write_resp_event event.  The end of the procedure is
  *        indicated by a @ref aci_gatt_clt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param execute Execute or cancel writes.
  *        Values:
  *        - 0x00: Cancel all prepared writes
  *        - 0x01: Immediately write all pending prepared values
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_execute_write_req(uint16_t connection_handle,
                                            uint8_t execute);
/**
  * @brief Starts the GATT client procedure to discover all primary services on
  *        the server. The responses of the procedure are given through the @ref
  *        aci_att_clt_read_by_group_type_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_disc_all_primary_services(uint16_t connection_handle);
/**
  * @brief Starts the procedure to discover the primary services of the specified
  *        UUID on the server. The responses of the procedure are given through
  *        the @ref aci_att_clt_find_by_type_value_resp_event event. The end of
  *        the procedure is indicated by a @ref aci_gatt_clt_proc_complete_event
  *        event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_disc_primary_service_by_uuid(uint16_t connection_handle,
                                                       uint8_t uuid_type,
                                                       uuid_t *uuid);
/**
  * @brief Starts the procedure to find all included services. The responses of
  *        the procedure are given through the @ref
  *        aci_att_clt_read_by_type_resp_event event. The end of the procedure is
  *        indicated by a @ref aci_gatt_clt_proc_complete_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_find_included_services(uint16_t connection_handle,
                                                 uint16_t start_handle,
                                                 uint16_t end_handle);
/**
  * @brief Starts the procedure to discover all the characteristics of a given
  *        service. When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_clt_read_by_type_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_disc_all_char_of_service(uint16_t connection_handle,
                                                   uint16_t start_handle,
                                                   uint16_t end_handle);
/**
  * @brief Starts the procedure to discover all the characteristics specified by
  *        a UUID. When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_gatt_clt_disc_read_char_by_uuid_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Start attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End attribute handle of the service
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_disc_char_by_uuid(uint16_t connection_handle,
                                            uint16_t start_handle,
                                            uint16_t end_handle,
                                            uint8_t uuid_type,
                                            uuid_t *uuid);
/**
  * @brief Starts the procedure to discover all characteristic descriptors on the
  *        server. When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_clt_find_info_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param char_handle Handle of the characteristic value
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End handle of the characteristic
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_disc_all_char_desc(uint16_t connection_handle,
                                             uint16_t char_handle,
                                             uint16_t end_handle);
/**
  * @brief Starts the procedure to read an attribute value. When the procedure is
  *        completed, a @ref aci_gatt_clt_proc_complete_event event is generated.
  *        Before procedure completion the response packet is given through @ref
  *        aci_att_clt_read_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_read(uint16_t connection_handle,
                               uint16_t attr_handle);
/**
  * @brief Starts the procedure to read all the characteristics specified by the
  *        UUID. When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_gatt_clt_disc_read_char_by_uuid_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param start_handle Starting handle of the range to be searched
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param end_handle End handle of the range to be searched
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param uuid_type UUID type.
  *        Values:
  *        - 0x01: 16-bit UUID
  *        - 0x02: 128-bit UUID
  * @param uuid See @ref uuid_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_read_using_char_uuid(uint16_t connection_handle,
                                               uint16_t start_handle,
                                               uint16_t end_handle,
                                               uint8_t uuid_type,
                                               uuid_t *uuid);
/**
  * @brief Starts the procedure to read a long attribute value. the procedure is
  *        completed, a @ref aci_gatt_clt_proc_complete_event event is generated.
  *        Before procedure completion the response packets are given through
  *        @ref aci_att_clt_read_blob_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset from which the value needs to be read
  *        Values:
  *        - 0 ... 511
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_read_long(uint16_t connection_handle,
                                    uint16_t attr_handle,
                                    uint16_t val_offset);
/**
  * @brief Starts a procedure to read multiple characteristic values from a
  *        server. This sub-procedure is used to read multiple Characteristic
  *        Values from a server when the client knows the Characteristic Value
  *        Handles. When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated. Before procedure
  *        completion the response packets are given through @ref
  *        aci_att_clt_read_multiple_resp_event event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param number_of_handles The number of handles for which the value has to be
  *        read. From 2 to (ATT_MTU-1)/2
  *        Values:
  *        - 0x02 ... 0xFF
  * @param handle_entry See @ref handle_entry_t
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_read_multiple_char_value(uint16_t connection_handle,
                                                   uint8_t number_of_handles,
                                                   handle_entry_t handle_entry[]);
/**
  * @brief Starts the procedure to write an attribute (characteristic value or
  *        descriptor). When the procedure is completed, a @ref
  *        aci_gatt_clt_proc_complete_event event is generated.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_write_nwk(uint16_t connection_handle,
                                    uint16_t attr_handle,
                                    uint16_t attribute_val_length,
                                    uint8_t attribute_val[]);
/**
  * @brief Starts the procedure to write a long attribute value (i.e. an
  *        attribute with a length greater than the current ATT MTU). When the
  *        procedure is completed, a @ref aci_gatt_clt_proc_complete_event event
  *        is generated. During the procedure, @ref
  *        aci_att_clt_prepare_write_resp_event and @ref
  *        aci_att_clt_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset at which the attribute has to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_write_long_nwk(uint16_t connection_handle,
                                         uint16_t attr_handle,
                                         uint16_t val_offset,
                                         uint16_t attribute_val_length,
                                         uint8_t attribute_val[]);
/**
  * @brief Starts the procedure to write a characteristic reliably (a check is
  *        made on the written values). When the procedure is completed, a  @ref
  *        aci_gatt_clt_proc_complete_event event is generated. During the
  *        procedure, @ref aci_att_clt_prepare_write_resp_event and @ref
  *        aci_att_clt_exec_write_resp_event events are raised.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param val_offset Offset at which the attribute has to be written
  *        Values:
  *        - 0 ... 511
  * @param attribute_val_length Length of the value to be written
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_write_char_reliable_nwk(uint16_t connection_handle,
                                                  uint16_t attr_handle,
                                                  uint16_t val_offset,
                                                  uint16_t attribute_val_length,
                                                  uint8_t attribute_val[]);
/**
  * @brief Starts the procedure to write a characteristic value without waiting
  *        for any response from the server. No events are generated after this
  *        command is executed. Writing attributes using this function is not
  *        considered reliable by the standard: packets may be discarded by the
  *        peer if too many write commands are received.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written (maximum value
  *        is ATT_MTU - 3)
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_write_without_resp(uint16_t connection_handle,
                                             uint16_t attr_handle,
                                             uint16_t attribute_val_length,
                                             uint8_t attribute_val[]);
/**
  * @brief Starts a signed write without response from the server. The procedure
  *        is used to write a characteristic value with an authentication
  *        signature without waiting for any response from the server. It cannot
  *        be used when the link is encrypted.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be written
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param attribute_val_length Length of the value to be written (up to ATT_MTU
  *        - 13)
  * @param attribute_val Value to be written
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_signed_write_without_resp(uint16_t connection_handle,
                                                    uint16_t attr_handle,
                                                    uint16_t attribute_val_length,
                                                    uint8_t attribute_val[]);
/**
  * @brief Allow application to confirm indication. This command has to be sent
  *        when the application receives the event @ref
  *        aci_gatt_clt_indication_event.
  * @param connection_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_clt_confirm_indication(uint16_t connection_handle);
/**
  * @brief This command sets the security permission for the attribute handle
  *        specified. Currently the setting of security permission is allowed
  *        only for client characteristic configuration descriptor.
  * @param attr_handle Handle of the attribute whose security permission has to
  *        be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param security_permissions Security permission flags.
  *        Flags:
  *        - 0x00
  *        - 0x01: AUTHEN_READ (Need authentication to read)
  *        - 0x04: ENCRY_READ (Need encryption to read)
  *        - 0x08: AUTHEN_WRITE (need authentication to write)
  *        - 0x20: ENCRY_WRITE (need encryption to write)
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_set_security_permission_nwk(uint16_t attr_handle,
                                                      uint8_t security_permissions);
/**
  * @brief Reads the value of the attribute handle specified from the local GATT
  *        database. Client Characteristic Configuration Descriptor is not
  *        supported.
  * @param attr_handle Handle of the attribute to read
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param offset Offset from which the value needs to be read
  *        Values:
  *        - 0 ... 511
  * @param value_length_requested Maximum number of octets to be returned as
  *        attribute value
  *        Values:
  *        - 0 ... 512
  * @param[out] length Length of the attribute value
  * @param[out] value_length Length in octets of the Value parameter
  * @param[out] value Attribute value
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_read_handle_value_nwk(uint16_t attr_handle,
                                                uint16_t offset,
                                                uint16_t value_length_requested,
                                                uint16_t *length,
                                                uint16_t *value_length,
                                                uint8_t value[]);
/**
  * @brief This command sets the access permission for the attribute handle
  *        specified.
  * @param attr_handle Handle of the attribute whose security permission has to
  *        be modified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param access_permissions Access permission
  *        Flags:
  *        - 0x00
  *        - 0x01: READ
  *        - 0x02: WRITE
  *        - 0x04: WRITE_NO_RESP
  *        - 0x08: SIGNED_WRITE
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_set_access_permission_nwk(uint16_t attr_handle,
                                                    uint8_t access_permissions);
/**
  * @brief Send an indication or notification for the provided attribute handle.
  *        The Flags parameter indicate what kind of message will be sent: -)
  *        0x00 Send a notification -) 0x02 Send an indication
  * @param connection_handle Connection handle to be used to identify the
  *        connection with the peer device.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Handle of the attribute to be notified
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param flags Select the notification type.
  *        Values:
  *        - 0x00: GATT_NOTIFICATION
  *        - 0x02: GATT_INDICATION
  * @param val_length Length of the Val field.
  * @param val
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_notify(uint16_t connection_handle,
                                 uint16_t attr_handle,
                                 uint8_t flags,
                                 uint16_t val_length,
                                 uint8_t val[]);
/**
  * @brief Response to an aci_att_srv_exec_write_req_event.
  * @param conn_handle Connection handle that identifies the connection.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param exec If 1, allow execution of queued writes. If 0 flush all queued
  *        writes for the given connection handle.
  *        Values:
  *        - 0x00: FLUSH
  *        - 0x01: EXECUTE
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_exec_write_resp_nwk(uint16_t conn_handle,
                                              uint8_t exec);
/**
  * @brief This command should be sent when ACI_GATT_SRV_AUTHORIZE_NWK_EVENT is
  *        received.
  * @param conn_handle Connection handle to be used to identify the connection
  *        with the peer device.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param attr_handle Offset from which the value needs to be read or write
  *        Values:
  *        - 0 ... 511
  * @param operation_type
  *        Values:
  *        - 0x00: Read
  *        - 0x10: Write Request
  *        - 0x11: Write Command or Signed Write Command
  *        - 0x12: Prepare Write Request
  * @param error_code Set to 0 if operation is authorized, otherwise error_code
  *        is the ATT error code that will be sent to the peer in reaponse to the
  *        request.
  *        Values:
  *        - 0: Authorize
  *        - 0 ... 255
  * @param attr_val_offset Offset from which the attribute needs to be read or
  *        written. For a read operation it is always 0.
  *        Values:
  *        - 0 ... 511
  * @param data_length Length of Data field
  * @param data The data that the client has requested to write.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_authorize_resp_nwk(uint16_t conn_handle,
                                             uint16_t attr_handle,
                                             uint8_t operation_type,
                                             uint8_t error_code,
                                             uint16_t attr_val_offset,
                                             uint16_t data_length,
                                             uint8_t data[]);
/**
  * @brief Reads the content of the prepare write queue. This command should be
  *        used to atomically read all the queued write operations after a
  *        aci_att_srv_exec_write_req_event is received and before sending the
  *        aci_gatt_srv_exec_write_resp.
  * @param conn_handle Connection handle to be used to identify the connection
  *        with the peer device.
  *        Values:
  *        - 0x0000 ... 0x0EFF
  * @param item_index The index of the entry in the queue for the selected
  *        connection handle.
  * @param[out] attr_handle The attribute handle of the returned entry.
  * @param[out] value_offset The offset from which the peer is requesting to
  *             start writing.
  * @param[out] value_length Length in octets of the Value parameter
  * @param[out] value The value to be written.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_read_prepare_queue_nwk(uint16_t conn_handle,
                                                 uint8_t item_index,
                                                 uint16_t *attr_handle,
                                                 uint16_t *value_offset,
                                                 uint16_t *value_length,
                                                 uint8_t value[]);
/**
  * @brief Updates an attribute value for that kind of attributes that have
  *        different values for each connection, i.e. the Client Characteristic
  *        Configuration Descriptors. WARNING: use of this function can affect
  *        interoperability. Do not use the function unless you are aware of what
  *        you are doing.
  * @param connection_handle Connection handle for which the attribute value will
  *        be written.
  * @param attr_handle Handle of the attribute
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param value_length Length of the attribute value in octets.
  * @param value Attribute value.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_write_multiple_instance_handle_value(uint16_t connection_handle,
                                                               uint16_t attr_handle,
                                                               uint16_t value_length,
                                                               uint8_t value[]);
/**
  * @brief Read the value for that kind of attributes that have different values
  *        for each connection, i.e. the Client Characteristic Configuration
  *        Descriptors.
  * @param connection_handle Connection handle for which the attribute value will
  *        be read.
  * @param attr_handle Handle of the attribute
  *        Values:
  *        - 0x0001 ... 0xFFFF
  * @param[out] value_length Length of the attribute value in octets.
  * @param[out] value Attribute value.
  * @retval Value indicating success or error code.
  */
ble_status_t aci_gatt_srv_read_multiple_instance_handle_value_nwk(uint16_t connection_handle,
                                                                  uint16_t attr_handle,
                                                                  uint16_t *value_length,
                                                                  uint8_t value[]);
/**
     * @}
     */

#ifdef __cplusplus
}
#endif

#endif /* _BLUENRG_LP_GATT_ACI_H_ */
