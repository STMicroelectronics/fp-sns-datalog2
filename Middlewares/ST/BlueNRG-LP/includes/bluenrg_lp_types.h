/**
  ******************************************************************************
  * @file    bluenrg_lp_types.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version 2.0.0
  * @date    25-September-2024
  * @brief   Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef _BLUENRG_LP_TYPES_H_
#define _BLUENRG_LP_TYPES_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "compiler.h"
#include "ble_const.h"
#include "ble_types.h"
#include "bluenrg_conf.h"

typedef uint8_t ble_status_t;

#include <stdint.h>
typedef ble_status_t (*hci_event_process)(uint8_t *buffer_in);
typedef struct hci_command_table_type_s
{
  uint16_t evt_code;
  hci_event_process process;
} hci_events_table_type_t, hci_le_meta_events_table_type_t, hci_vendor_specific_events_table_type_t;

extern const hci_events_table_type_t hci_events_table[8];
extern const hci_le_meta_events_table_type_t hci_le_meta_events_table[25];
extern const hci_vendor_specific_events_table_type_t hci_vendor_specific_events_table[46];
#include <stdint.h>

/** Documentation for C struct advertising_set_parameters_t */
typedef PACKED(struct) packed_Advertising_Set_Parameters_t_s
{
  /** It is used to identify an advertising set.
    *  Values:
    *  - 0x00 ... 0xEF
    */
  uint8_t advertising_handle;
  /** The duration[i] parameter indicates the duration for which that advertising set
    *  is enabled. The duration begins at the start of the first advertising
    *  event of this advertising set. The Controller should not start an extended
    *  advertising event that it cannot complete within the duration. Time = N *
    *  10 ms 0x00 means no advertising duration: advertising will continue until
    *  the Host disables it.
    *  Values:
    *  - 0x0000 (0 ms) : No advertising duration
    *  - 0x0001 (10 ms)  ... 0xFFFF (655350 ms)
    */
  uint16_t duration;
  /** The max_extended_advertising_events[i] parameter, if non-zero, indicates the
    *  maximum number of extended advertising events that shall be sent prior to
    *  disabling the extended advertising set even if the duration[i] parameter
    *  has not expired.
    *  Values:
    *  - 0x00: No maximum number of advertising events.
    *  - 0x01 ... 0xFF: Maximum number of extended advertising events.
    */
  uint8_t max_extended_advertising_events;
} packed_advertising_set_parameters_t;
/** Documentation for C struct extended_scan_parameters_t */
typedef PACKED(struct) packed_Extended_Scan_Parameters_t_s
{
  /** The scan_type parameter specifies the type of scan to perform. 0: Passive
    *  Scanning. No scan request PDUs shall be sent. 1: Active Scanning. Scan
    *  request PDUs may be sent.
    *  Values:
    *  - 0x00: Passive Scanning
    *  - 0x01: Active Scanning
    */
  uint8_t scan_type;
  /** Time interval from when the Controller started its last scan until it begins the
    *  subsequent scan on the primary advertising channel.  Time = N * 0.625 ms
    *  Values:
    *  - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t scan_interval;
  /** Duration of the scan on the primary advertising channel.  Time = N * 0.625 ms
    *  Values:
    *  - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t scan_window;
} packed_extended_scan_parameters_t;
/** Documentation for C struct extended_create_connection_parameters_t */
typedef PACKED(struct) packed_Extended_Create_Connection_Parameters_t_s
{
  /** Time interval from when the Controller started its last scan until it begins the
    *  subsequent scan on the primary advertising channel. Time = N * 0.625 ms;
    *  Time Range: 2.5 ms to 40.959375 s.
    *  Values:
    *  - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t scan_interval;
  /** Duration of the scan on the primary advertising channel. Time = N * 0.625 ms;
    *  Time Range: 2.5 ms to 40.959375 s.
    *  Values:
    *  - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t scan_window;
  /** Minimum value for the connection interval. This shall be less than or equal to
    *  conn_interval_max[i]. Time = N * 1.25 ms; Time Range: 7.5 ms to 4 s.
    *  Values:
    *  - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
    */
  uint16_t conn_interval_min;
  /** Maximum value for the connection interval. This shall be less than or equal to
    *  conn_interval_max[i]. Time = N * 1.25 ms; Time Range: 7.5 ms to 4 s.
    *  Values:
    *  - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms)
    */
  uint16_t conn_interval_max;
  /** Slave latency for the connection in number of connection events
    *  Values:
    *  - 0x0000 ... 0x01F3
    */
  uint16_t conn_latency;
  /** Supervision timeout for the LE Link. (See [Vol 6] Part B, Section 4.5.2) Time =
    *  N * 10 ms; Time Range: 100 ms to 32 s.
    *  Values:
    *  - 0x000A (100 ms)  ... 0x0C80 (32000 ms)
    */
  uint16_t supervision_timeout;
  /** Informative parameter recommending the minimum length of connection event needed
    *  for this LE connection. Time = N * 0.625 ms.
    *  Values:
    *  - 0x0000 (0.000 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t minimum_ce_length;
  /** Informative parameter recommending the maximum length of connection event needed
    *  for this LE connection. Time = N * 0.625 ms.
    *  Values:
    *  - 0x0000 (0.000 ms)  ... 0xFFFF (40959.375 ms)
    */
  uint16_t maximum_ce_length;
} packed_extended_create_conn_param_t;
/** Documentation for C struct bonded_device_entry_t */
typedef PACKED(struct) packed_bonded_device_entry_t_s
{
  /** Address type.
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    */
  uint8_t address_type;
  /** Identity Address (Public or Random) of the device.
   */
  uint8_t address[6];
} packed_bonded_device_entry_t;
/** Documentation for C struct list_entry_t */
typedef PACKED(struct) packed_list_entry_t_s
{
  /** Address type.
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    */
  uint8_t peer_address_type;
  /** Public Device Address or Random Device Address of the device to be added to the
    *  list.
    */
  uint8_t peer_address[6];
} packed_list_entry_t;
/** Documentation for C union service_uuid_t */
typedef PACKED(union) packed_service_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t service_uuid_16;
  /** 128-bit UUID
   */
  uint8_t service_uuid_128[16];
} packed_service_uuid_t;
/** Documentation for C union char_uuid_t */
typedef PACKED(union) packed_char_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} packed_char_uuid_t;
/** Documentation for C union char_desc_uuid_t */
typedef PACKED(union) packed_char_desc_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t char_uuid_16;
  /** 128-bit UUID
   */
  uint8_t char_uuid_128[16];
} packed_char_desc_uuid_t;
/** Documentation for C union uuid_t */
typedef PACKED(union) packed_uuid_t_s
{
  /** 16-bit UUID
   */
  uint16_t uuid_16;
  /** 128-bit UUID
   */
  uint8_t uuid_128[16];
} packed_uuid_t;
/** Documentation for C struct handle_entry_t */
typedef PACKED(struct) packed_handle_entry_t_s
{
  /** The handles for which the attribute value has to be read
    *  Values:
    *  - 0x0001 ... 0xFFFF
    */
  uint16_t handle;
} packed_handle_entry_t;
/** Documentation for C struct handle_packets_pair_entry_t */
typedef PACKED(struct) packed_handle_packets_pair_entry_t_s
{
  /** Connection handle
   */
  uint16_t connection_handle;
  /** The number of HCI Data Packets that have been completed (transmitted or flushed)
    *  for the associated connection_handle since the previous time the event was
    *  returned.
    */
  uint16_t hc_num_of_completed_packets;
} packed_handle_packets_pair_entry_t;
/** Documentation for C struct attribute_group_handle_pair_t */
typedef PACKED(struct) packed_attribute_group_handle_pair_t_s
{
  /** Found Attribute handle
   */
  uint16_t found_attribute_handle;
  /** Group End handle
   */
  uint16_t group_end_handle;
} packed_attribute_group_handle_pair_t;
/** Documentation for C struct advertising_report_t */
typedef PACKED(struct) packed_advertising_report_t_s
{
  /** Type of advertising report event: ADV_IND: Connectable undirected advertising',
    *  ADV_DIRECT_IND: Connectable directed advertising, ADV_SCAN_IND: Scannable
    *  undirected advertising, ADV_NONCONN_IND: Non connectable undirected
    *  advertising, SCAN_RSP: Scan response.
    *  Values:
    *  - 0x00: ADV_IND
    *  - 0x01: ADV_DIRECT_IND
    *  - 0x02: ADV_SCAN_IND
    *  - 0x03: ADV_NONCONN_IND
    *  - 0x04: SCAN_RSP
    */
  uint8_t event_type;
  /** 0x00 Public Device Address 0x01 Random Device Address 0x02 Public Identity
    *  Address (Corresponds to Resolved Private Address) 0x03 Random (Static)
    *  Identity Address (Corresponds to Resolved Private Address)
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    *  - 0x02: Public Identity Address
    *  - 0x03: Random (Static) Identity Address
    */
  uint8_t address_type;
  /** Public Device Address, Random Device Address, Public Identity Address or Random
    *  (static) Identity Address of the advertising device.
    */
  uint8_t address[6];
  /** Length of the Data[i] field for each device which responded.
    *  Values:
    *  - 0 ... 31
    */
  uint8_t data_length;
  /** data_length octets of advertising or scan response data formatted as defined in
    *  [Vol 3] Part C, Section 8.
    */
  uint8_t data[1];
  /** N Size: 1 Octet (signed integer) Units: dBm
    *  Values:
    *  - -127 ... 20
    *  - 127: RSSI not available
    */
  int8_t rssi;
} packed_advertising_report_t;
/** Documentation for C struct direct_advertising_report_t */
typedef PACKED(struct) packed_Direct_Advertising_Report_t_s
{
  /** Advertising type
    *  Values:
    *  - 0x01: Connectable directed advertising (ADV_DIRECT_IND)
    */
  uint8_t event_type;
  /** 0x00 Public Device Address 0x01 Random Device Address 0x02 Public Identity
    *  Address (Corresponds to Resolved Private Address) 0x03 Random (Static)
    *  Identity Address (Corresponds to Resolved Private Address)
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    *  - 0x02: Public Identity Address
    *  - 0x03: Random (Static) Identity Address
    */
  uint8_t address_type;
  /** Public Device Address, Random Device Address, Public Identity Address or Random
    *  (static) Identity Address of the advertising device.
    */
  uint8_t address[6];
  /** 0x01 Random Device Address
    *  Values:
    *  - 0x01: Random Device Address
    */
  uint8_t direct_address_type;
  /** Random Device Address
   */
  uint8_t direct_address[6];
  /** N Size: 1 Octet (signed integer) Units: dBm
    *  Values:
    *  - -127 ... 20
    *  - 127: RSSI not available
    */
  int8_t rssi;
} packed_direct_advertising_report_t;
/** Documentation for C struct extended_advertising_report_t */
typedef PACKED(struct) packed_Extended_Advertising_Report_t_s
{
  /** Event Type parameter. Bits from 0 to 4: 0 Connectable advertising 1 Scannable
    *  advertising 2 Directed advertising 3 Scan response 4 Legacy advertising
    *  PDUs used Bits 5-6 Data status: 00b = Complete 01b = Incomplete, more data
    *  to come 10b = Incomplete, data truncated, no more to come 11b = Reserved
    *  for future use
    *  Flags:
    *  - 0x0001: Connectable advertising
    *  - 0x0002: Scannable advertising
    *  - 0x0004: Directed advertising
    *  - 0x0008: Scan response
    *  - 0x0010: Legacy advertising PDUs used
    */
  uint16_t event_type;
  /** Address Type
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    *  - 0x02: Public Identity Address (corresponds to Resolved Private Address)
    *  - 0x03: Random (static) Identity Address (corresponds to Resolved Private Address)
    *  - 0xFF: No address provided (anonymous advertisement)
    */
  uint8_t address_type;
  /** Public Device Address, Random Device Address, Public Identity Address or Random
    *  (static) Identity Address of the advertising device.
    */
  uint8_t address[6];
  /** PHY used to send the advertising PDU on the primary advertising physical
    *  channel.
    *  Values:
    *  - 0x01: LE_1M_PHY
    *  - 0x03: LE_CODED_PHY
    */
  uint8_t primary_phy;
  /** This parameter indicates the PHY used to send the advertising PDU(s), if any, on
    *  the secondary advertising physical channel.
    *  Values:
    *  - 0x00: No packets
    *  - 0x01: LE_1M_PHY
    *  - 0x02: LE_2M_PHY
    *  - 0x03: LE_CODED_PHY
    */
  uint8_t secondary_phy;
  /** Advertising SID subfield in the ADI field of the PDU
    *  Values:
    *  - 0x00 ... 0x0F: Value of the Advertising SID subfield in the ADI field of the PDU
    *  - 0xFF: No ADI field in the PDU
    */
  uint8_t advertising_sid;
  /** Tx Power. Units: dBm.
    *  Values:
    *  - -127 ... 126
    *  - 127: NA
    */
  int8_t tx_power;
  /** RSSI value; Units: dBm; All other values Reserved for future use.
    *  Values:
    *  - -127 ... 20
    *  - 127: NA
    */
  int8_t rssi;
  /** Interval of the periodic advertising. Time = N * 1.25 ms; Time Range: 7.5 ms to
    *  81,918.75 s.
    *  Values:
    *  - 0x0000 (NaN) : No periodic advertising
    *  - 0x0006 (7.50 ms)  ... 0xFFFF (NaN) : Interval of the periodic advertising
    */
  uint16_t periodic_advertising_interval;
  /** Direct address type
    *  Values:
    *  - 0x00: Public Device Address
    *  - 0x01: Random Device Address
    *  - 0x02: Public Identity Address (Corresponds to Resolved Private Address)
    *  - 0x03: Random (static) Identity Address (Corresponds to Resolved Private Address)
    *  - 0x04 ... 0xFD: Reserved for future use
    *  - 0xFE: Random Device Address (Controller unable to resolve)
    *  - 0xFF: Reserved for future use
    */
  uint8_t direct_address_type;
  /** Public Device Address, Random Device Address, Public Identity Address or Random
    *  (static) Identity Address of the target device
    */
  uint8_t direct_address[6];
  /** Length of the Data[i] field for each device which responded
    *  Values:
    *  - 0 ... 229: Length of the Data[i] field for each device which responded
    *  - 229 ... 255: Reserved for future use
    */
  uint8_t data_length;
  /** data_length[i] octets of advertising or scan response data formatted as defined
    *  in [Vol 3] Part C, Section 11. Note: Each element of this array has a
    *  variable length.
    */
  uint8_t data[1];
} packed_extended_advertising_report_t;
/** Documentation for C struct samples_t */
typedef PACKED(struct) packed_samples_t_s
{
  /** The list of I samples for the reported packet. Each sample is a signed integer.
    *  The list is in the order of the sampling points within the packet.
    */
  int8_t i_sample;
  /** The list of Q samples for the reported packet. Each sample is a signed integer.
    *  The list is in the order of the sampling points within the packet.
    */
  int8_t q_sample;
} packed_samples_t;
typedef PACKED(struct) hci_disconnect_cp0_s
{
  uint16_t connection_handle;
  uint8_t reason;
} hci_disconnect_cp0;

typedef PACKED(struct) hci_disconnect_rp0_s
{
  uint8_t status;
} hci_disconnect_rp0;

typedef PACKED(struct) hci_read_remote_version_information_cp0_s
{
  uint16_t connection_handle;
} hci_read_remote_version_information_cp0;

typedef PACKED(struct) hci_read_remote_version_information_rp0_s
{
  uint8_t status;
} hci_read_remote_version_information_rp0;

typedef PACKED(struct) hci_set_event_mask_cp0_s
{
  uint8_t event_mask[8];
} hci_set_event_mask_cp0;

typedef PACKED(struct) hci_set_event_mask_rp0_s
{
  uint8_t status;
} hci_set_event_mask_rp0;

typedef PACKED(struct) hci_reset_rp0_s
{
  uint8_t status;
} hci_reset_rp0;

typedef PACKED(struct) hci_read_transmit_power_level_cp0_s
{
  uint16_t connection_handle;
  uint8_t type;
} hci_read_transmit_power_level_cp0;

typedef PACKED(struct) hci_read_transmit_power_level_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  int8_t transmit_power_level;
} hci_read_transmit_power_level_rp0;

typedef PACKED(struct) hci_set_event_mask_page_2_cp0_s
{
  uint8_t event_mask_page_2[8];
} hci_set_event_mask_page_2_cp0;

typedef PACKED(struct) hci_set_event_mask_page_2_rp0_s
{
  uint8_t status;
} hci_set_event_mask_page_2_rp0;

typedef PACKED(struct) hci_read_authenticated_payload_timeout_cp0_s
{
  uint16_t connection_handle;
} hci_read_authenticated_payload_timeout_cp0;

typedef PACKED(struct) hci_read_authenticated_payload_timeout_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint16_t authenticated_payload_timeout;
} hci_read_authenticated_payload_timeout_rp0;

typedef PACKED(struct) hci_write_authenticated_payload_timeout_cp0_s
{
  uint16_t connection_handle;
  uint16_t authenticated_payload_timeout;
} hci_write_authenticated_payload_timeout_cp0;

typedef PACKED(struct) hci_write_authenticated_payload_timeout_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_write_authenticated_payload_timeout_rp0;

typedef PACKED(struct) hci_read_local_version_information_rp0_s
{
  uint8_t status;
  uint8_t hci_version;
  uint16_t hci_revision;
  uint8_t lmp_pal_version;
  uint16_t manufacturer_name;
  uint16_t lmp_pal_subversion;
} hci_read_local_version_information_rp0;

typedef PACKED(struct) hci_read_local_supported_commands_rp0_s
{
  uint8_t status;
  uint8_t supported_commands[64];
} hci_read_local_supported_commands_rp0;

typedef PACKED(struct) hci_read_local_supported_features_rp0_s
{
  uint8_t status;
  uint8_t lmp_features[8];
} hci_read_local_supported_features_rp0;

typedef PACKED(struct) hci_read_bd_addr_rp0_s
{
  uint8_t status;
  uint8_t bd_addr[6];
} hci_read_bd_addr_rp0;

typedef PACKED(struct) hci_read_rssi_cp0_s
{
  uint16_t connection_handle;
} hci_read_rssi_cp0;

typedef PACKED(struct) hci_read_rssi_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  int8_t rssi;
} hci_read_rssi_rp0;

typedef PACKED(struct) hci_le_set_event_mask_cp0_s
{
  uint8_t le_event_mask[8];
} hci_le_set_event_mask_cp0;

typedef PACKED(struct) hci_le_set_event_mask_rp0_s
{
  uint8_t status;
} hci_le_set_event_mask_rp0;

typedef PACKED(struct) hci_le_read_buffer_size_rp0_s
{
  uint8_t status;
  uint16_t hc_le_acl_data_packet_length;
  uint8_t hc_total_num_le_acl_data_lackets;
} hci_le_read_buffer_size_rp0;

typedef PACKED(struct) hci_le_read_local_supported_features_rp0_s
{
  uint8_t status;
  uint8_t le_features[8];
} hci_le_read_local_supported_features_rp0;

typedef PACKED(struct) hci_le_set_random_address_cp0_s
{
  uint8_t random_address[6];
} hci_le_set_random_address_cp0;

typedef PACKED(struct) hci_le_set_random_address_rp0_s
{
  uint8_t status;
} hci_le_set_random_address_rp0;

typedef PACKED(struct) hci_le_set_advertising_parameters_cp0_s
{
  uint16_t advertising_interval_min;
  uint16_t advertising_interval_max;
  uint8_t advertising_type;
  uint8_t own_address_type;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t advertising_channel_map;
  uint8_t advertising_filter_policy;
} hci_le_set_advertising_parameters_cp0;

typedef PACKED(struct) hci_le_set_advertising_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_advertising_parameters_rp0;

typedef PACKED(struct) hci_le_read_advertising_channel_tx_power_rp0_s
{
  uint8_t status;
  int8_t transmit_power_level;
} hci_le_read_advertising_channel_tx_power_rp0;

typedef PACKED(struct) hci_le_set_advertising_data_cp0_s
{
  uint8_t advertising_data_length;
  uint8_t advertising_data[31];
} hci_le_set_advertising_data_cp0;

typedef PACKED(struct) hci_le_set_advertising_data_rp0_s
{
  uint8_t status;
} hci_le_set_advertising_data_rp0;

typedef PACKED(struct) hci_le_set_scan_response_data_cp0_s
{
  uint8_t scan_response_data_length;
  uint8_t scan_response_data[31];
} hci_le_set_scan_response_data_cp0;

typedef PACKED(struct) hci_le_set_scan_response_data_rp0_s
{
  uint8_t status;
} hci_le_set_scan_response_data_rp0;

typedef PACKED(struct) hci_le_set_advertising_enable_cp0_s
{
  uint8_t advertising_enable;
} hci_le_set_advertising_enable_cp0;

typedef PACKED(struct) hci_le_set_advertising_enable_rp0_s
{
  uint8_t status;
} hci_le_set_advertising_enable_rp0;

typedef PACKED(struct) hci_le_set_scan_parameters_cp0_s
{
  uint8_t le_scan_type;
  uint16_t le_scan_interval;
  uint16_t le_scan_window;
  uint8_t own_address_type;
  uint8_t scanning_filter_policy;
} hci_le_set_scan_parameters_cp0;

typedef PACKED(struct) hci_le_set_scan_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_scan_parameters_rp0;

typedef PACKED(struct) hci_le_set_scan_enable_cp0_s
{
  uint8_t le_scan_enable;
  uint8_t filter_duplicates;
} hci_le_set_scan_enable_cp0;

typedef PACKED(struct) hci_le_set_scan_enable_rp0_s
{
  uint8_t status;
} hci_le_set_scan_enable_rp0;

typedef PACKED(struct) hci_le_create_connection_cp0_s
{
  uint16_t le_scan_interval;
  uint16_t le_scan_window;
  uint8_t initiator_filter_policy;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t own_address_type;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint16_t minimum_ce_length;
  uint16_t maximum_ce_length;
} hci_le_create_connection_cp0;

typedef PACKED(struct) hci_le_create_connection_rp0_s
{
  uint8_t status;
} hci_le_create_connection_rp0;

typedef PACKED(struct) hci_le_create_connection_cancel_rp0_s
{
  uint8_t status;
} hci_le_create_connection_cancel_rp0;

typedef PACKED(struct) hci_le_read_white_list_size_rp0_s
{
  uint8_t status;
  uint8_t white_list_size;
} hci_le_read_white_list_size_rp0;

typedef PACKED(struct) hci_le_clear_white_list_rp0_s
{
  uint8_t status;
} hci_le_clear_white_list_rp0;

typedef PACKED(struct) hci_le_add_device_to_white_list_cp0_s
{
  uint8_t address_type;
  uint8_t address[6];
} hci_le_add_device_to_white_list_cp0;

typedef PACKED(struct) hci_le_add_device_to_white_list_rp0_s
{
  uint8_t status;
} hci_le_add_device_to_white_list_rp0;

typedef PACKED(struct) hci_le_remove_device_from_white_list_cp0_s
{
  uint8_t address_type;
  uint8_t address[6];
} hci_le_remove_device_from_white_list_cp0;

typedef PACKED(struct) hci_le_remove_device_from_white_list_rp0_s
{
  uint8_t status;
} hci_le_remove_device_from_white_list_rp0;

typedef PACKED(struct) hci_le_connection_update_cp0_s
{
  uint16_t connection_handle;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint16_t minimum_ce_length;
  uint16_t maximum_ce_length;
} hci_le_connection_update_cp0;

typedef PACKED(struct) hci_le_connection_update_rp0_s
{
  uint8_t status;
} hci_le_connection_update_rp0;

typedef PACKED(struct) hci_le_set_host_channel_classification_cp0_s
{
  uint8_t le_channel_map[5];
} hci_le_set_host_channel_classification_cp0;

typedef PACKED(struct) hci_le_set_host_channel_classification_rp0_s
{
  uint8_t status;
} hci_le_set_host_channel_classification_rp0;

typedef PACKED(struct) hci_le_read_channel_map_cp0_s
{
  uint16_t connection_handle;
} hci_le_read_channel_map_cp0;

typedef PACKED(struct) hci_le_read_channel_map_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t le_channel_map[5];
} hci_le_read_channel_map_rp0;

typedef PACKED(struct) hci_le_read_remote_used_features_cp0_s
{
  uint16_t connection_handle;
} hci_le_read_remote_used_features_cp0;

typedef PACKED(struct) hci_le_read_remote_used_features_rp0_s
{
  uint8_t status;
} hci_le_read_remote_used_features_rp0;

typedef PACKED(struct) hci_le_encrypt_cp0_s
{
  uint8_t key[16];
  uint8_t plaintext_data[16];
} hci_le_encrypt_cp0;

typedef PACKED(struct) hci_le_encrypt_rp0_s
{
  uint8_t status;
  uint8_t encrypted_data[16];
} hci_le_encrypt_rp0;

typedef PACKED(struct) hci_le_rand_rp0_s
{
  uint8_t status;
  uint8_t random_number[8];
} hci_le_rand_rp0;

typedef PACKED(struct) hci_le_start_encryption_cp0_s
{
  uint16_t connection_handle;
  uint8_t random_number[8];
  uint16_t encrypted_diversifier;
  uint8_t long_term_key[16];
} hci_le_start_encryption_cp0;

typedef PACKED(struct) hci_le_start_encryption_rp0_s
{
  uint8_t status;
} hci_le_start_encryption_rp0;

typedef PACKED(struct) hci_le_long_term_key_request_reply_cp0_s
{
  uint16_t connection_handle;
  uint8_t long_term_key[16];
} hci_le_long_term_key_request_reply_cp0;

typedef PACKED(struct) hci_le_long_term_key_request_reply_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_long_term_key_request_reply_rp0;

typedef PACKED(struct) hci_le_long_term_key_requested_negative_reply_cp0_s
{
  uint16_t connection_handle;
} hci_le_long_term_key_requested_negative_reply_cp0;

typedef PACKED(struct) hci_le_long_term_key_requested_negative_reply_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_long_term_key_requested_negative_reply_rp0;

typedef PACKED(struct) hci_le_read_supported_states_rp0_s
{
  uint8_t status;
  uint8_t le_states[8];
} hci_le_read_supported_states_rp0;

typedef PACKED(struct) hci_le_receiver_test_cp0_s
{
  uint8_t rx_frequency;
} hci_le_receiver_test_cp0;

typedef PACKED(struct) hci_le_receiver_test_rp0_s
{
  uint8_t status;
} hci_le_receiver_test_rp0;

typedef PACKED(struct) hci_le_transmitter_test_cp0_s
{
  uint8_t tx_frequency;
  uint8_t length_of_test_data;
  uint8_t packet_payload;
} hci_le_transmitter_test_cp0;

typedef PACKED(struct) hci_le_transmitter_test_rp0_s
{
  uint8_t status;
} hci_le_transmitter_test_rp0;

typedef PACKED(struct) hci_le_test_end_rp0_s
{
  uint8_t status;
  uint16_t number_of_packets;
} hci_le_test_end_rp0;

typedef PACKED(struct) hci_le_set_data_length_cp0_s
{
  uint16_t connection_handle;
  uint16_t tx_octets;
  uint16_t tx_time;
} hci_le_set_data_length_cp0;

typedef PACKED(struct) hci_le_set_data_length_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_data_length_rp0;

typedef PACKED(struct) hci_le_read_suggested_default_data_length_rp0_s
{
  uint8_t status;
  uint16_t suggested_max_tx_octets;
  uint16_t suggested_max_tx_time;
} hci_le_read_suggested_default_data_length_rp0;

typedef PACKED(struct) hci_le_write_suggested_default_data_length_cp0_s
{
  uint16_t suggested_max_tx_octets;
  uint16_t suggested_max_tx_time;
} hci_le_write_suggested_default_data_length_cp0;

typedef PACKED(struct) hci_le_write_suggested_default_data_length_rp0_s
{
  uint8_t status;
} hci_le_write_suggested_default_data_length_rp0;

typedef PACKED(struct) hci_le_read_local_p256_public_key_rp0_s
{
  uint8_t status;
} hci_le_read_local_p256_public_key_rp0;

typedef PACKED(struct) hci_le_generate_dhkey_cp0_s
{
  uint8_t remote_p256_public_key[64];
} hci_le_generate_dhkey_cp0;

typedef PACKED(struct) hci_le_generate_dhkey_rp0_s
{
  uint8_t status;
} hci_le_generate_dhkey_rp0;

typedef PACKED(struct) hci_le_add_device_to_resolving_list_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
  uint8_t peer_irk[16];
  uint8_t local_irk[16];
} hci_le_add_device_to_resolving_list_cp0;

typedef PACKED(struct) hci_le_add_device_to_resolving_list_rp0_s
{
  uint8_t status;
} hci_le_add_device_to_resolving_list_rp0;

typedef PACKED(struct) hci_le_remove_device_from_resolving_list_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
} hci_le_remove_device_from_resolving_list_cp0;

typedef PACKED(struct) hci_le_remove_device_from_resolving_list_rp0_s
{
  uint8_t status;
} hci_le_remove_device_from_resolving_list_rp0;

typedef PACKED(struct) hci_le_clear_resolving_list_rp0_s
{
  uint8_t status;
} hci_le_clear_resolving_list_rp0;

typedef PACKED(struct) hci_le_read_resolving_list_size_rp0_s
{
  uint8_t status;
  uint8_t resolving_list_size;
} hci_le_read_resolving_list_size_rp0;

typedef PACKED(struct) hci_le_read_peer_resolvable_address_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
} hci_le_read_peer_resolvable_address_cp0;

typedef PACKED(struct) hci_le_read_peer_resolvable_address_rp0_s
{
  uint8_t status;
  uint8_t peer_resolvable_address[6];
} hci_le_read_peer_resolvable_address_rp0;

typedef PACKED(struct) hci_le_read_local_resolvable_address_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
} hci_le_read_local_resolvable_address_cp0;

typedef PACKED(struct) hci_le_read_local_resolvable_address_rp0_s
{
  uint8_t status;
  uint8_t local_resolvable_address[6];
} hci_le_read_local_resolvable_address_rp0;

typedef PACKED(struct) hci_le_set_address_resolution_enable_cp0_s
{
  uint8_t address_resolution_enable;
} hci_le_set_address_resolution_enable_cp0;

typedef PACKED(struct) hci_le_set_address_resolution_enable_rp0_s
{
  uint8_t status;
} hci_le_set_address_resolution_enable_rp0;

typedef PACKED(struct) hci_le_set_resolvable_private_address_timeout_cp0_s
{
  uint16_t rpa_timeout;
} hci_le_set_resolvable_private_address_timeout_cp0;

typedef PACKED(struct) hci_le_set_resolvable_private_address_timeout_rp0_s
{
  uint8_t status;
} hci_le_set_resolvable_private_address_timeout_rp0;

typedef PACKED(struct) hci_le_read_maximum_data_length_rp0_s
{
  uint8_t status;
  uint16_t supported_max_tx_octets;
  uint16_t supported_max_tx_time;
  uint16_t supported_max_rx_octets;
  uint16_t supported_max_rx_time;
} hci_le_read_maximum_data_length_rp0;

typedef PACKED(struct) hci_le_read_phy_cp0_s
{
  uint16_t connection_handle;
} hci_le_read_phy_cp0;

typedef PACKED(struct) hci_le_read_phy_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t tx_phy;
  uint8_t rx_phy;
} hci_le_read_phy_rp0;

typedef PACKED(struct) hci_le_set_default_phy_cp0_s
{
  uint8_t all_phys;
  uint8_t tx_phys;
  uint8_t rx_phys;
} hci_le_set_default_phy_cp0;

typedef PACKED(struct) hci_le_set_default_phy_rp0_s
{
  uint8_t status;
} hci_le_set_default_phy_rp0;

typedef PACKED(struct) hci_le_set_phy_cp0_s
{
  uint16_t connection_handle;
  uint8_t all_phys;
  uint8_t tx_phys;
  uint8_t rx_phys;
  uint16_t phy_options;
} hci_le_set_phy_cp0;

typedef PACKED(struct) hci_le_set_phy_rp0_s
{
  uint8_t status;
} hci_le_set_phy_rp0;

typedef PACKED(struct) hci_le_enhanced_receiver_test_cp0_s
{
  uint8_t rx_channel;
  uint8_t phy;
  uint8_t modulation_index;
} hci_le_enhanced_receiver_test_cp0;

typedef PACKED(struct) hci_le_enhanced_receiver_test_rp0_s
{
  uint8_t status;
} hci_le_enhanced_receiver_test_rp0;

typedef PACKED(struct) hci_le_enhanced_transmitter_test_cp0_s
{
  uint8_t tx_channel;
  uint8_t length_of_test_data;
  uint8_t packet_payload;
  uint8_t phy;
} hci_le_enhanced_transmitter_test_cp0;

typedef PACKED(struct) hci_le_enhanced_transmitter_test_rp0_s
{
  uint8_t status;
} hci_le_enhanced_transmitter_test_rp0;

typedef PACKED(struct) hci_le_set_advertising_set_random_address_cp0_s
{
  uint8_t advertising_handle;
  uint8_t advertising_random_address[6];
} hci_le_set_advertising_set_random_address_cp0;

typedef PACKED(struct) hci_le_set_advertising_set_random_address_rp0_s
{
  uint8_t status;
} hci_le_set_advertising_set_random_address_rp0;

typedef PACKED(struct) hci_le_set_extended_advertising_parameters_cp0_s
{
  uint8_t advertising_handle;
  uint16_t advertising_event_properties;
  uint8_t primary_advertising_interval_min[3];
  uint8_t primary_advertising_interval_max[3];
  uint8_t primary_advertising_channel_map;
  uint8_t own_address_type;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t advertising_filter_policy;
  int8_t advertising_tx_power;
  uint8_t primary_advertising_phy;
  uint8_t secondary_advertising_max_skip;
  uint8_t secondary_advertising_phy;
  uint8_t advertising_sid;
  uint8_t scan_request_notification_enable;
} hci_le_set_extended_advertising_parameters_cp0;

typedef PACKED(struct) hci_le_set_extended_advertising_parameters_rp0_s
{
  uint8_t status;
  int8_t selected_tx_power;
} hci_le_set_extended_advertising_parameters_rp0;

typedef PACKED(struct) hci_le_set_extended_advertising_data_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t fragment_preference;
  uint8_t advertising_data_length;
  uint8_t advertising_data[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} hci_le_set_extended_advertising_data_cp0;

typedef PACKED(struct) hci_le_set_extended_advertising_data_rp0_s
{
  uint8_t status;
} hci_le_set_extended_advertising_data_rp0;

typedef PACKED(struct) hci_le_set_extended_scan_response_data_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t fragment_preference;
  uint8_t scan_response_data_length;
  uint8_t scan_response_data[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} hci_le_set_extended_scan_response_data_cp0;

typedef PACKED(struct) hci_le_set_extended_scan_response_data_rp0_s
{
  uint8_t status;
} hci_le_set_extended_scan_response_data_rp0;

typedef PACKED(struct) hci_le_set_extended_advertising_enable_cp0_s
{
  uint8_t enable;
  uint8_t number_of_sets;
  packed_advertising_set_parameters_t advertising_set_parameters[(HCI_MAX_PAYLOAD_SIZE - 2) /
                                                                 sizeof(packed_advertising_set_parameters_t)];
} hci_le_set_extended_advertising_enable_cp0;

typedef PACKED(struct) hci_le_set_extended_advertising_enable_rp0_s
{
  uint8_t status;
} hci_le_set_extended_advertising_enable_rp0;

typedef PACKED(struct) hci_le_read_maximum_advertising_data_length_rp0_s
{
  uint8_t status;
  uint16_t maximum_advertising_data_length;
} hci_le_read_maximum_advertising_data_length_rp0;

typedef PACKED(struct) hci_le_read_number_of_supported_advertising_sets_rp0_s
{
  uint8_t status;
  uint8_t num_supported_advertising_sets;
} hci_le_read_number_of_supported_advertising_sets_rp0;

typedef PACKED(struct) hci_le_remove_advertising_set_cp0_s
{
  uint8_t advertising_handle;
} hci_le_remove_advertising_set_cp0;

typedef PACKED(struct) hci_le_remove_advertising_set_rp0_s
{
  uint8_t status;
} hci_le_remove_advertising_set_rp0;

typedef PACKED(struct) hci_le_clear_advertising_sets_rp0_s
{
  uint8_t status;
} hci_le_clear_advertising_sets_rp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_parameters_cp0_s
{
  uint8_t advertising_handle;
  uint16_t periodic_advertising_interval_min;
  uint16_t periodic_advertising_interval_max;
  uint16_t periodic_advertising_properties;
} hci_le_set_periodic_advertising_parameters_cp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_periodic_advertising_parameters_rp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_data_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t advertising_data_length;
  uint8_t advertising_data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} hci_le_set_periodic_advertising_data_cp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_data_rp0_s
{
  uint8_t status;
} hci_le_set_periodic_advertising_data_rp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_enable_cp0_s
{
  uint8_t enable;
  uint8_t advertising_handle;
} hci_le_set_periodic_advertising_enable_cp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_enable_rp0_s
{
  uint8_t status;
} hci_le_set_periodic_advertising_enable_rp0;

typedef PACKED(struct) hci_le_set_extended_scan_parameters_cp0_s
{
  uint8_t own_address_type;
  uint8_t scanning_filter_policy;
  uint8_t scanning_phys;
  packed_extended_scan_parameters_t extended_scan_parameters[(HCI_MAX_PAYLOAD_SIZE - 3) /
                                                             sizeof(packed_extended_scan_parameters_t)];
} hci_le_set_extended_scan_parameters_cp0;

typedef PACKED(struct) hci_le_set_extended_scan_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_extended_scan_parameters_rp0;

typedef PACKED(struct) hci_le_set_extended_scan_enable_cp0_s
{
  uint8_t enable;
  uint8_t filter_duplicates;
  uint16_t duration;
  uint16_t period;
} hci_le_set_extended_scan_enable_cp0;

typedef PACKED(struct) hci_le_set_extended_scan_enable_rp0_s
{
  uint8_t status;
} hci_le_set_extended_scan_enable_rp0;

typedef PACKED(struct) hci_le_extended_create_connection_cp0_s
{
  uint8_t initiating_filter_policy;
  uint8_t own_address_type;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t initiating_phys;
  packed_extended_create_conn_param_t ext_create_conn_param[(HCI_MAX_PAYLOAD_SIZE - 10) /
                                                            sizeof(packed_extended_create_conn_param_t)];
} hci_le_extended_create_connection_cp0;

typedef PACKED(struct) hci_le_extended_create_connection_rp0_s
{
  uint8_t status;
} hci_le_extended_create_connection_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_create_sync_cp0_s
{
  uint8_t options;
  uint8_t advertising_sid;
  uint8_t advertising_address_type;
  uint8_t advertising_address[6];
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t sync_cte_type;
} hci_le_periodic_advertising_create_sync_cp0;

typedef PACKED(struct) hci_le_periodic_advertising_create_sync_rp0_s
{
  uint8_t status;
} hci_le_periodic_advertising_create_sync_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_create_sync_cancel_rp0_s
{
  uint8_t status;
} hci_le_periodic_advertising_create_sync_cancel_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_terminate_sync_cp0_s
{
  uint16_t sync_handle;
} hci_le_periodic_advertising_terminate_sync_cp0;

typedef PACKED(struct) hci_le_periodic_advertising_terminate_sync_rp0_s
{
  uint8_t status;
} hci_le_periodic_advertising_terminate_sync_rp0;

typedef PACKED(struct) hci_le_add_device_to_periodic_advertiser_list_cp0_s
{
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertising_sid;
} hci_le_add_device_to_periodic_advertiser_list_cp0;

typedef PACKED(struct) hci_le_add_device_to_periodic_advertiser_list_rp0_s
{
  uint8_t status;
} hci_le_add_device_to_periodic_advertiser_list_rp0;

typedef PACKED(struct) hci_le_remove_device_from_periodic_advertising_list_cp0_s
{
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertising_sid;
} hci_le_remove_device_from_periodic_advertising_list_cp0;

typedef PACKED(struct) hci_le_remove_device_from_periodic_advertising_list_rp0_s
{
  uint8_t status;
} hci_le_remove_device_from_periodic_advertising_list_rp0;

typedef PACKED(struct) hci_le_clear_periodic_advertiser_list_rp0_s
{
  uint8_t status;
} hci_le_clear_periodic_advertiser_list_rp0;

typedef PACKED(struct) hci_le_read_periodic_advertiser_list_size_rp0_s
{
  uint8_t status;
  uint8_t periodic_advertiser_list_size;
} hci_le_read_periodic_advertiser_list_size_rp0;

typedef PACKED(struct) hci_le_read_transmit_power_rp0_s
{
  uint8_t status;
  int8_t min_tx_power;
  int8_t max_tx_power;
} hci_le_read_transmit_power_rp0;

typedef PACKED(struct) hci_le_read_rf_path_compensation_rp0_s
{
  uint8_t status;
  int16_t rf_tx_path_compensation_value;
  int16_t rf_rx_path_compensation_value;
} hci_le_read_rf_path_compensation_rp0;

typedef PACKED(struct) hci_le_write_rf_path_compensation_cp0_s
{
  int16_t rf_tx_path_compensation_value;
  int16_t rf_rx_path_compensation_value;
} hci_le_write_rf_path_compensation_cp0;

typedef PACKED(struct) hci_le_write_rf_path_compensation_rp0_s
{
  uint8_t status;
} hci_le_write_rf_path_compensation_rp0;

typedef PACKED(struct) hci_le_set_privacy_mode_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
  uint8_t privacy_mode;
} hci_le_set_privacy_mode_cp0;

typedef PACKED(struct) hci_le_set_privacy_mode_rp0_s
{
  uint8_t status;
} hci_le_set_privacy_mode_rp0;

typedef PACKED(struct) hci_le_receiver_test_v3_cp0_s
{
  uint8_t rx_channel;
  uint8_t phy;
  uint8_t modulation_index;
  uint8_t expected_cte_length;
  uint8_t expected_cte_type;
  uint8_t slot_durations;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} hci_le_receiver_test_v3_cp0;

typedef PACKED(struct) hci_le_receiver_test_v3_rp0_s
{
  uint8_t status;
} hci_le_receiver_test_v3_rp0;

typedef PACKED(struct) hci_le_transmitter_test_v3_cp0_s
{
  uint8_t tx_channel;
  uint8_t test_data_length;
  uint8_t packet_payload;
  uint8_t phy;
  uint8_t cte_length;
  uint8_t cte_type;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} hci_le_transmitter_test_v3_cp0;

typedef PACKED(struct) hci_le_transmitter_test_v3_rp0_s
{
  uint8_t status;
} hci_le_transmitter_test_v3_rp0;

typedef PACKED(struct) hci_le_set_connectionless_cte_transmit_parameters_cp0_s
{
  uint8_t advertising_handle;
  uint8_t cte_length;
  uint8_t cte_type;
  uint8_t cte_count;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} hci_le_set_connectionless_cte_transmit_parameters_cp0;

typedef PACKED(struct) hci_le_set_connectionless_cte_transmit_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_connectionless_cte_transmit_parameters_rp0;

typedef PACKED(struct) hci_le_set_connectionless_cte_transmit_enable_cp0_s
{
  uint8_t advertising_handle;
  uint8_t cte_enable;
} hci_le_set_connectionless_cte_transmit_enable_cp0;

typedef PACKED(struct) hci_le_set_connectionless_cte_transmit_enable_rp0_s
{
  uint8_t status;
} hci_le_set_connectionless_cte_transmit_enable_rp0;

typedef PACKED(struct) hci_le_set_connectionless_iq_sampling_enable_cp0_s
{
  uint16_t sync_handle;
  uint8_t sampling_enable;
  uint8_t slot_durations;
  uint8_t max_sampled_cte_s;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} hci_le_set_connectionless_iq_sampling_enable_cp0;

typedef PACKED(struct) hci_le_set_connectionless_iq_sampling_enable_rp0_s
{
  uint8_t status;
  uint16_t sync_handle;
} hci_le_set_connectionless_iq_sampling_enable_rp0;

typedef PACKED(struct) hci_le_set_connection_cte_receive_parameters_cp0_s
{
  uint16_t connection_handle;
  uint8_t sampling_enable;
  uint8_t slot_durations;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} hci_le_set_connection_cte_receive_parameters_cp0;

typedef PACKED(struct) hci_le_set_connection_cte_receive_parameters_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_connection_cte_receive_parameters_rp0;

typedef PACKED(struct) hci_le_set_connection_cte_transmit_parameters_cp0_s
{
  uint16_t connection_handle;
  uint8_t cte_type;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} hci_le_set_connection_cte_transmit_parameters_cp0;

typedef PACKED(struct) hci_le_set_connection_cte_transmit_parameters_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_connection_cte_transmit_parameters_rp0;

typedef PACKED(struct) hci_le_connection_cte_request_enable_cp0_s
{
  uint16_t connection_handle;
  uint8_t enable;
  uint16_t cte_request_interval;
  uint8_t requested_cte_length;
  uint8_t requested_cte_type;
} hci_le_connection_cte_request_enable_cp0;

typedef PACKED(struct) hci_le_connection_cte_request_enable_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_connection_cte_request_enable_rp0;

typedef PACKED(struct) hci_le_connection_cte_response_enable_cp0_s
{
  uint16_t connection_handle;
  uint8_t enable;
} hci_le_connection_cte_response_enable_cp0;

typedef PACKED(struct) hci_le_connection_cte_response_enable_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_connection_cte_response_enable_rp0;

typedef PACKED(struct) hci_le_read_antenna_information_rp0_s
{
  uint8_t status;
  uint8_t supported_switching_sampling_rates;
  uint8_t num_antennae;
  uint8_t max_switching_pattern_length;
  uint8_t max_cte_length;
} hci_le_read_antenna_information_rp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_receive_enable_cp0_s
{
  uint16_t sync_handle;
  uint8_t enable;
} hci_le_set_periodic_advertising_receive_enable_cp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_receive_enable_rp0_s
{
  uint8_t status;
} hci_le_set_periodic_advertising_receive_enable_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_sync_transfer_cp0_s
{
  uint16_t connection_handle;
  uint16_t service_data;
  uint16_t sync_handle;
} hci_le_periodic_advertising_sync_transfer_cp0;

typedef PACKED(struct) hci_le_periodic_advertising_sync_transfer_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_periodic_advertising_sync_transfer_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_set_info_transfer_cp0_s
{
  uint16_t connection_handle;
  uint16_t service_data;
  uint8_t advertising_handle;
} hci_le_periodic_advertising_set_info_transfer_cp0;

typedef PACKED(struct) hci_le_periodic_advertising_set_info_transfer_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_periodic_advertising_set_info_transfer_rp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_sync_transfer_parameters_cp0_s
{
  uint16_t connection_handle;
  uint8_t mode;
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t cte_type;
} hci_le_set_periodic_advertising_sync_transfer_parameters_cp0;

typedef PACKED(struct) hci_le_set_periodic_advertising_sync_transfer_parameters_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_periodic_advertising_sync_transfer_parameters_rp0;

typedef PACKED(struct) hci_le_set_default_periodic_advertising_sync_transfer_parameters_cp0_s
{
  uint8_t mode;
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t cte_type;
} hci_le_set_default_periodic_advertising_sync_transfer_parameters_cp0;

typedef PACKED(struct) hci_le_set_default_periodic_advertising_sync_transfer_parameters_rp0_s
{
  uint8_t status;
} hci_le_set_default_periodic_advertising_sync_transfer_parameters_rp0;

typedef PACKED(struct) hci_le_enhanced_read_transmit_power_level_cp0_s
{
  uint16_t connection_handle;
  uint8_t phy;
} hci_le_enhanced_read_transmit_power_level_cp0;

typedef PACKED(struct) hci_le_enhanced_read_transmit_power_level_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t phy;
  int8_t current_transmit_power_level;
  int8_t max_transmit_power_level;
} hci_le_enhanced_read_transmit_power_level_rp0;

typedef PACKED(struct) hci_le_read_remote_transmit_power_level_cp0_s
{
  uint16_t connection_handle;
  uint8_t phy;
} hci_le_read_remote_transmit_power_level_cp0;

typedef PACKED(struct) hci_le_read_remote_transmit_power_level_rp0_s
{
  uint8_t status;
} hci_le_read_remote_transmit_power_level_rp0;

typedef PACKED(struct) hci_le_set_path_loss_reporting_parameters_cp0_s
{
  uint16_t connection_handle;
  uint8_t high_threshold;
  uint8_t high_hysteresis;
  uint8_t low_threshold;
  uint8_t low_hysteresis;
  uint16_t min_time_spent;
} hci_le_set_path_loss_reporting_parameters_cp0;

typedef PACKED(struct) hci_le_set_path_loss_reporting_parameters_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_path_loss_reporting_parameters_rp0;

typedef PACKED(struct) hci_le_set_path_loss_reporting_enable_cp0_s
{
  uint16_t connection_handle;
  uint8_t enable;
} hci_le_set_path_loss_reporting_enable_cp0;

typedef PACKED(struct) hci_le_set_path_loss_reporting_enable_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_path_loss_reporting_enable_rp0;

typedef PACKED(struct) hci_le_set_transmit_power_reporting_enable_cp0_s
{
  uint16_t connection_handle;
  uint8_t local_enable;
  uint8_t remote_enable;
} hci_le_set_transmit_power_reporting_enable_cp0;

typedef PACKED(struct) hci_le_set_transmit_power_reporting_enable_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_set_transmit_power_reporting_enable_rp0;

typedef PACKED(struct) hci_le_transmitter_test_v4_cp0_s
{
  uint8_t tx_channel;
  uint8_t test_data_length;
  uint8_t packet_payload;
  uint8_t phy;
  uint8_t cte_length;
  uint8_t cte_type;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} hci_le_transmitter_test_v4_cp0;

typedef PACKED(struct) hci_le_transmitter_test_v4_cp1_s
{
  int8_t transmit_power_level;
} hci_le_transmitter_test_v4_cp1;

typedef PACKED(struct) hci_le_transmitter_test_v4_rp0_s
{
  uint8_t status;
} hci_le_transmitter_test_v4_rp0;

typedef PACKED(struct) aci_hal_get_fw_build_number_rp0_s
{
  uint8_t status;
  uint16_t build_number;
} aci_hal_get_fw_build_number_rp0;

typedef PACKED(struct) aci_hal_get_firmware_details_rp0_s
{
  uint8_t status;
  uint8_t dtm_version_major;
  uint8_t dtm_version_minor;
  uint8_t dtm_version_patch;
  uint8_t dtm_variant;
  uint16_t dtm_build_number;
  uint8_t btle_stack_version_major;
  uint8_t btle_stack_version_minor;
  uint8_t btle_stack_version_patch;
  uint8_t btle_stack_development;
  uint16_t btle_stack_variant;
  uint16_t btle_stack_build_number;
} aci_hal_get_firmware_details_rp0;

typedef PACKED(struct) aci_hal_write_config_data_cp0_s
{
  uint8_t offset;
  uint8_t length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 2) / sizeof(uint8_t)];
} aci_hal_write_config_data_cp0;

typedef PACKED(struct) aci_hal_write_config_data_rp0_s
{
  uint8_t status;
} aci_hal_write_config_data_rp0;

typedef PACKED(struct) aci_hal_read_config_data_cp0_s
{
  uint8_t offset;
} aci_hal_read_config_data_cp0;

typedef PACKED(struct) aci_hal_read_config_data_rp0_s
{
  uint8_t status;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 2) / sizeof(uint8_t)];
} aci_hal_read_config_data_rp0;

typedef PACKED(struct) aci_hal_set_tx_power_level_cp0_s
{
  uint8_t en_high_power;
  uint8_t pa_level;
} aci_hal_set_tx_power_level_cp0;

typedef PACKED(struct) aci_hal_set_tx_power_level_rp0_s
{
  uint8_t status;
} aci_hal_set_tx_power_level_rp0;

typedef PACKED(struct) aci_hal_le_tx_test_packet_number_rp0_s
{
  uint8_t status;
  uint32_t number_of_packets;
} aci_hal_le_tx_test_packet_number_rp0;

typedef PACKED(struct) aci_hal_tone_start_cp0_s
{
  uint8_t rf_channel;
  uint8_t offset;
} aci_hal_tone_start_cp0;

typedef PACKED(struct) aci_hal_tone_start_rp0_s
{
  uint8_t status;
} aci_hal_tone_start_rp0;

typedef PACKED(struct) aci_hal_tone_stop_rp0_s
{
  uint8_t status;
} aci_hal_tone_stop_rp0;

typedef PACKED(struct) aci_hal_get_link_status_cp0_s
{
  uint8_t bank_index;
} aci_hal_get_link_status_cp0;

typedef PACKED(struct) aci_hal_get_link_status_rp0_s
{
  uint8_t status;
  uint8_t link_status[8];
  uint16_t link_connection_handle[16 / 2];
} aci_hal_get_link_status_rp0;

typedef PACKED(struct) aci_hal_set_radio_activity_mask_cp0_s
{
  uint16_t radio_activity_mask;
} aci_hal_set_radio_activity_mask_cp0;

typedef PACKED(struct) aci_hal_set_radio_activity_mask_rp0_s
{
  uint8_t status;
} aci_hal_set_radio_activity_mask_rp0;

typedef PACKED(struct) aci_hal_set_event_mask_cp0_s
{
  uint32_t event_mask;
} aci_hal_set_event_mask_cp0;

typedef PACKED(struct) aci_hal_set_event_mask_rp0_s
{
  uint8_t status;
} aci_hal_set_event_mask_rp0;

typedef PACKED(struct) aci_hal_set_le_power_control_cp0_s
{
  uint8_t enable;
  uint8_t phy;
  int8_t rssi_target;
  uint8_t rssi_hysteresis;
  int8_t initial_tx_power;
  uint8_t rssi_filtering_coefficient;
} aci_hal_set_le_power_control_cp0;

typedef PACKED(struct) aci_hal_set_le_power_control_rp0_s
{
  uint8_t status;
} aci_hal_set_le_power_control_rp0;

typedef PACKED(struct) aci_hal_updater_start_rp0_s
{
  uint8_t status;
} aci_hal_updater_start_rp0;

typedef PACKED(struct) aci_hal_get_updater_version_rp0_s
{
  uint8_t status;
  uint8_t version;
} aci_hal_get_updater_version_rp0;

typedef PACKED(struct) aci_hal_get_updater_bufsize_rp0_s
{
  uint8_t status;
  uint8_t buffer_size;
} aci_hal_get_updater_bufsize_rp0;

typedef PACKED(struct) aci_hal_updater_erase_blue_flag_rp0_s
{
  uint8_t status;
} aci_hal_updater_erase_blue_flag_rp0;

typedef PACKED(struct) aci_hal_updater_reset_blue_flag_rp0_s
{
  uint8_t status;
} aci_hal_updater_reset_blue_flag_rp0;

typedef PACKED(struct) aci_hal_updater_erase_sector_cp0_s
{
  uint32_t address;
} aci_hal_updater_erase_sector_cp0;

typedef PACKED(struct) aci_hal_updater_erase_sector_rp0_s
{
  uint8_t status;
} aci_hal_updater_erase_sector_rp0;

typedef PACKED(struct) aci_hal_updater_prog_data_blk_cp0_s
{
  uint32_t address;
  uint16_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_hal_updater_prog_data_blk_cp0;

typedef PACKED(struct) aci_hal_updater_prog_data_blk_rp0_s
{
  uint8_t status;
} aci_hal_updater_prog_data_blk_rp0;

typedef PACKED(struct) aci_hal_updater_read_data_blk_cp0_s
{
  uint32_t address;
  uint16_t data_length;
} aci_hal_updater_read_data_blk_cp0;

typedef PACKED(struct) aci_hal_updater_read_data_blk_rp0_s
{
  uint8_t status;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 1) / sizeof(uint8_t)];
} aci_hal_updater_read_data_blk_rp0;

typedef PACKED(struct) aci_hal_updater_calc_crc_cp0_s
{
  uint32_t address;
  uint8_t num_of_sectors;
} aci_hal_updater_calc_crc_cp0;

typedef PACKED(struct) aci_hal_updater_calc_crc_rp0_s
{
  uint8_t status;
  uint32_t crc;
} aci_hal_updater_calc_crc_rp0;

typedef PACKED(struct) aci_hal_updater_hw_version_rp0_s
{
  uint8_t status;
  uint8_t hw_version;
} aci_hal_updater_hw_version_rp0;

typedef PACKED(struct) aci_hal_transmitter_test_packets_cp0_s
{
  uint8_t tx_frequency;
  uint8_t length_of_test_data;
  uint8_t packet_payload;
  uint16_t number_of_packets;
  uint8_t phy;
} aci_hal_transmitter_test_packets_cp0;

typedef PACKED(struct) aci_hal_transmitter_test_packets_rp0_s
{
  uint8_t status;
} aci_hal_transmitter_test_packets_rp0;

typedef PACKED(struct) aci_hal_transmitter_test_packets_v2_cp0_s
{
  uint8_t tx_channel;
  uint8_t test_data_length;
  uint8_t packet_payload;
  uint16_t number_of_packets;
  uint8_t phy;
  uint8_t cte_length;
  uint8_t cte_type;
  uint8_t switching_pattern_length;
  uint8_t antenna_ids[(HCI_MAX_PAYLOAD_SIZE - 9) / sizeof(uint8_t)];
} aci_hal_transmitter_test_packets_v2_cp0;

typedef PACKED(struct) aci_hal_transmitter_test_packets_v2_rp0_s
{
  uint8_t status;
} aci_hal_transmitter_test_packets_v2_rp0;

typedef PACKED(struct) aci_hal_set_priority_cp0_s
{
  uint8_t ble_state;
  uint16_t connection_handle;
  uint8_t priority_max;
  uint8_t priority_min;
} aci_hal_set_priority_cp0;

typedef PACKED(struct) aci_hal_set_priority_rp0_s
{
  uint8_t status;
} aci_hal_set_priority_rp0;

typedef PACKED(struct) aci_hal_set_ce_length_cp0_s
{
  uint16_t ce_length;
} aci_hal_set_ce_length_cp0;

typedef PACKED(struct) aci_hal_set_ce_length_rp0_s
{
  uint8_t status;
} aci_hal_set_ce_length_rp0;

typedef PACKED(struct) aci_hal_write_radio_reg_cp0_s
{
  uint32_t start_address;
  uint8_t num_bytes;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_hal_write_radio_reg_cp0;

typedef PACKED(struct) aci_hal_write_radio_reg_rp0_s
{
  uint8_t status;
} aci_hal_write_radio_reg_rp0;

typedef PACKED(struct) aci_hal_read_radio_reg_cp0_s
{
  uint32_t start_address;
  uint8_t num_bytes;
} aci_hal_read_radio_reg_cp0;

typedef PACKED(struct) aci_hal_read_radio_reg_rp0_s
{
  uint8_t status;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 2) / sizeof(uint8_t)];
} aci_hal_read_radio_reg_rp0;

typedef PACKED(struct) aci_hal_set_antenna_switch_parameters_cp0_s
{
  uint8_t antenna_ids;
  uint8_t antenna_id_shift;
  uint8_t default_antenna_id;
  uint8_t rf_activity_enable;
} aci_hal_set_antenna_switch_parameters_cp0;

typedef PACKED(struct) aci_hal_set_antenna_switch_parameters_rp0_s
{
  uint8_t status;
} aci_hal_set_antenna_switch_parameters_rp0;

typedef PACKED(struct) aci_hal_get_evt_fifo_max_level_rp0_s
{
  uint8_t status;
  uint16_t isr0_fifo_max_level;
  uint16_t isr1_fifo_max_level;
  uint16_t user_fifo_max_level;
} aci_hal_get_evt_fifo_max_level_rp0;

typedef PACKED(struct) aci_gap_set_io_capability_cp0_s
{
  uint8_t io_capability;
} aci_gap_set_io_capability_cp0;

typedef PACKED(struct) aci_gap_set_io_capability_rp0_s
{
  uint8_t status;
} aci_gap_set_io_capability_rp0;

typedef PACKED(struct) aci_gap_set_authentication_requirement_cp0_s
{
  uint8_t bonding_mode;
  uint8_t mitm_mode;
  uint8_t sc_support;
  uint8_t key_press_notification_support;
  uint8_t min_encryption_key_size;
  uint8_t max_encryption_key_size;
  uint8_t use_fixed_pin;
  uint32_t fixed_pin;
} aci_gap_set_authentication_requirement_cp0;

typedef PACKED(struct) aci_gap_set_authentication_requirement_rp0_s
{
  uint8_t status;
} aci_gap_set_authentication_requirement_rp0;

typedef PACKED(struct) aci_gap_set_authorization_requirement_cp0_s
{
  uint16_t connection_handle;
  uint8_t authorization_enable;
} aci_gap_set_authorization_requirement_cp0;

typedef PACKED(struct) aci_gap_set_authorization_requirement_rp0_s
{
  uint8_t status;
} aci_gap_set_authorization_requirement_rp0;

typedef PACKED(struct) aci_gap_pass_key_resp_cp0_s
{
  uint16_t connection_handle;
  uint32_t pass_key;
} aci_gap_pass_key_resp_cp0;

typedef PACKED(struct) aci_gap_pass_key_resp_rp0_s
{
  uint8_t status;
} aci_gap_pass_key_resp_rp0;

typedef PACKED(struct) aci_gap_authorization_resp_cp0_s
{
  uint16_t connection_handle;
  uint8_t authorize;
} aci_gap_authorization_resp_cp0;

typedef PACKED(struct) aci_gap_authorization_resp_rp0_s
{
  uint8_t status;
} aci_gap_authorization_resp_rp0;

typedef PACKED(struct) aci_gap_init_cp0_s
{
  uint8_t role;
  uint8_t privacy_type;
  uint8_t device_name_char_len;
  uint8_t identity_address_type;
} aci_gap_init_cp0;

typedef PACKED(struct) aci_gap_init_rp0_s
{
  uint8_t status;
  uint16_t service_handle;
  uint16_t dev_name_char_handle;
  uint16_t appearance_char_handle;
} aci_gap_init_rp0;

typedef PACKED(struct) aci_gap_slave_security_req_cp0_s
{
  uint16_t connection_handle;
} aci_gap_slave_security_req_cp0;

typedef PACKED(struct) aci_gap_slave_security_req_rp0_s
{
  uint8_t status;
} aci_gap_slave_security_req_rp0;

typedef PACKED(struct) aci_gap_get_security_level_cp0_s
{
  uint16_t connection_handle;
} aci_gap_get_security_level_cp0;

typedef PACKED(struct) aci_gap_get_security_level_rp0_s
{
  uint8_t status;
  uint8_t security_mode;
  uint8_t security_level;
} aci_gap_get_security_level_rp0;

typedef PACKED(struct) aci_gap_set_event_mask_cp0_s
{
  uint16_t gap_evt_mask;
} aci_gap_set_event_mask_cp0;

typedef PACKED(struct) aci_gap_set_event_mask_rp0_s
{
  uint8_t status;
} aci_gap_set_event_mask_rp0;

typedef PACKED(struct) aci_gap_terminate_cp0_s
{
  uint16_t connection_handle;
  uint8_t reason;
} aci_gap_terminate_cp0;

typedef PACKED(struct) aci_gap_terminate_rp0_s
{
  uint8_t status;
} aci_gap_terminate_rp0;

typedef PACKED(struct) aci_gap_clear_security_db_rp0_s
{
  uint8_t status;
} aci_gap_clear_security_db_rp0;

typedef PACKED(struct) aci_gap_allow_rebond_cp0_s
{
  uint16_t connection_handle;
} aci_gap_allow_rebond_cp0;

typedef PACKED(struct) aci_gap_allow_rebond_rp0_s
{
  uint8_t status;
} aci_gap_allow_rebond_rp0;

typedef PACKED(struct) aci_gap_create_connection_cp0_s
{
  uint8_t initiating_phy;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
} aci_gap_create_connection_cp0;

typedef PACKED(struct) aci_gap_create_connection_rp0_s
{
  uint8_t status;
} aci_gap_create_connection_rp0;

typedef PACKED(struct) aci_gap_terminate_proc_cp0_s
{
  uint8_t procedure_code;
} aci_gap_terminate_proc_cp0;

typedef PACKED(struct) aci_gap_terminate_proc_rp0_s
{
  uint8_t status;
} aci_gap_terminate_proc_rp0;

typedef PACKED(struct) aci_gap_start_connection_update_cp0_s
{
  uint16_t connection_handle;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint16_t minimum_ce_length;
  uint16_t maximum_ce_length;
} aci_gap_start_connection_update_cp0;

typedef PACKED(struct) aci_gap_start_connection_update_rp0_s
{
  uint8_t status;
} aci_gap_start_connection_update_rp0;

typedef PACKED(struct) aci_gap_send_pairing_req_cp0_s
{
  uint16_t connection_handle;
  uint8_t force_rebond;
} aci_gap_send_pairing_req_cp0;

typedef PACKED(struct) aci_gap_send_pairing_req_rp0_s
{
  uint8_t status;
} aci_gap_send_pairing_req_rp0;

typedef PACKED(struct) aci_gap_resolve_private_addr_cp0_s
{
  uint8_t address[6];
} aci_gap_resolve_private_addr_cp0;

typedef PACKED(struct) aci_gap_resolve_private_addr_rp0_s
{
  uint8_t status;
  uint8_t actual_address[6];
} aci_gap_resolve_private_addr_rp0;

typedef PACKED(struct) aci_gap_get_bonded_devices_cp0_s
{
  uint8_t offset;
  uint8_t max_num_of_addresses;
} aci_gap_get_bonded_devices_cp0;

typedef PACKED(struct) aci_gap_get_bonded_devices_rp0_s
{
  uint8_t status;
  uint8_t num_of_addresses;
  packed_bonded_device_entry_t bonded_device_entry[(HCI_MAX_PAYLOAD_SIZE - 2) / sizeof(packed_bonded_device_entry_t)];
} aci_gap_get_bonded_devices_rp0;

typedef PACKED(struct) aci_gap_is_device_bonded_cp0_s
{
  uint8_t peer_address_type;
  uint8_t peer_address[6];
} aci_gap_is_device_bonded_cp0;

typedef PACKED(struct) aci_gap_is_device_bonded_rp0_s
{
  uint8_t status;
} aci_gap_is_device_bonded_rp0;

typedef PACKED(struct) aci_gap_numeric_comparison_value_confirm_yesno_cp0_s
{
  uint16_t connection_handle;
  uint8_t confirm_yes_no;
} aci_gap_numeric_comparison_value_confirm_yesno_cp0;

typedef PACKED(struct) aci_gap_numeric_comparison_value_confirm_yesno_rp0_s
{
  uint8_t status;
} aci_gap_numeric_comparison_value_confirm_yesno_rp0;

typedef PACKED(struct) aci_gap_passkey_input_cp0_s
{
  uint16_t connection_handle;
  uint8_t input_type;
} aci_gap_passkey_input_cp0;

typedef PACKED(struct) aci_gap_passkey_input_rp0_s
{
  uint8_t status;
} aci_gap_passkey_input_rp0;

typedef PACKED(struct) aci_gap_get_oob_data_cp0_s
{
  uint8_t oob_data_type;
} aci_gap_get_oob_data_cp0;

typedef PACKED(struct) aci_gap_get_oob_data_rp0_s
{
  uint8_t status;
  uint8_t address_type;
  uint8_t address[6];
  uint8_t oob_data_type;
  uint8_t oob_data_len;
  uint8_t oob_data[16];
} aci_gap_get_oob_data_rp0;

typedef PACKED(struct) aci_gap_set_oob_data_cp0_s
{
  uint8_t device_type;
  uint8_t address_type;
  uint8_t address[6];
  uint8_t oob_data_type;
  uint8_t oob_data_len;
  uint8_t oob_data[16];
} aci_gap_set_oob_data_cp0;

typedef PACKED(struct) aci_gap_set_oob_data_rp0_s
{
  uint8_t status;
} aci_gap_set_oob_data_rp0;

typedef PACKED(struct) aci_gap_remove_bonded_device_cp0_s
{
  uint8_t peer_identity_address_type;
  uint8_t peer_identity_address[6];
} aci_gap_remove_bonded_device_cp0;

typedef PACKED(struct) aci_gap_remove_bonded_device_rp0_s
{
  uint8_t status;
} aci_gap_remove_bonded_device_rp0;

typedef PACKED(struct) aci_gap_set_advertising_configuration_cp0_s
{
  uint8_t advertising_handle;
  uint8_t discoverable_mode;
  uint16_t advertising_event_properties;
  uint32_t primary_advertising_interval_min;
  uint32_t primary_advertising_interval_max;
  uint8_t primary_advertising_channel_map;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t advertising_filter_policy;
  int8_t advertising_tx_power;
  uint8_t primary_advertising_phy;
  uint8_t secondary_advertising_max_skip;
  uint8_t secondary_advertising_phy;
  uint8_t advertising_sid;
  uint8_t scan_request_notification_enable;
} aci_gap_set_advertising_configuration_cp0;

typedef PACKED(struct) aci_gap_set_advertising_configuration_rp0_s
{
  uint8_t status;
} aci_gap_set_advertising_configuration_rp0;

typedef PACKED(struct) aci_gap_set_advertising_enable_cp0_s
{
  uint8_t enable;
  uint8_t number_of_sets;
  packed_advertising_set_parameters_t advertising_set_parameters[(HCI_MAX_PAYLOAD_SIZE - 2) /
                                                                 sizeof(packed_advertising_set_parameters_t)];
} aci_gap_set_advertising_enable_cp0;

typedef PACKED(struct) aci_gap_set_advertising_enable_rp0_s
{
  uint8_t status;
} aci_gap_set_advertising_enable_rp0;

typedef PACKED(struct) aci_gap_set_advertising_data_nwk_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t advertising_data_length;
  uint8_t advertising_data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_gap_set_advertising_data_nwk_cp0;

typedef PACKED(struct) aci_gap_set_advertising_data_nwk_rp0_s
{
  uint8_t status;
} aci_gap_set_advertising_data_nwk_rp0;

typedef PACKED(struct) aci_gap_set_scan_response_data_nwk_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t scan_response_data_length;
  uint8_t scan_response_data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_gap_set_scan_response_data_nwk_cp0;

typedef PACKED(struct) aci_gap_set_scan_response_data_nwk_rp0_s
{
  uint8_t status;
} aci_gap_set_scan_response_data_nwk_rp0;

typedef PACKED(struct) aci_gap_set_scan_configuration_cp0_s
{
  uint8_t filter_duplicates;
  uint8_t scanning_filter_policy;
  uint8_t Scanning_PHY;
  uint8_t scan_type;
  uint16_t scan_interval;
  uint16_t scan_window;
} aci_gap_set_scan_configuration_cp0;

typedef PACKED(struct) aci_gap_set_scan_configuration_rp0_s
{
  uint8_t status;
} aci_gap_set_scan_configuration_rp0;

typedef PACKED(struct) aci_gap_set_connection_configuration_cp0_s
{
  uint8_t initiating_phy;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint16_t minimum_ce_length;
  uint16_t maximum_ce_length;
} aci_gap_set_connection_configuration_cp0;

typedef PACKED(struct) aci_gap_set_connection_configuration_rp0_s
{
  uint8_t status;
} aci_gap_set_connection_configuration_rp0;

typedef PACKED(struct) aci_gap_start_procedure_cp0_s
{
  uint8_t procedure_code;
  uint8_t phy_s;
  uint16_t duration;
  uint16_t period;
} aci_gap_start_procedure_cp0;

typedef PACKED(struct) aci_gap_start_procedure_rp0_s
{
  uint8_t status;
} aci_gap_start_procedure_rp0;

typedef PACKED(struct) aci_gap_discover_name_cp0_s
{
  uint8_t phy_s;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
} aci_gap_discover_name_cp0;

typedef PACKED(struct) aci_gap_discover_name_rp0_s
{
  uint8_t status;
} aci_gap_discover_name_rp0;

typedef PACKED(struct) aci_gap_add_devices_to_white_and_resolving_list_cp0_s
{
  uint8_t lists;
  uint8_t clear_lists;
  uint8_t num_of_list_entries;
  packed_list_entry_t list_entry[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(packed_list_entry_t)];
} aci_gap_add_devices_to_white_and_resolving_list_cp0;

typedef PACKED(struct) aci_gap_add_devices_to_white_and_resolving_list_rp0_s
{
  uint8_t status;
} aci_gap_add_devices_to_white_and_resolving_list_rp0;

typedef PACKED(struct) aci_gap_configure_white_and_resolving_list_cp0_s
{
  uint8_t lists;
} aci_gap_configure_white_and_resolving_list_cp0;

typedef PACKED(struct) aci_gap_configure_white_and_resolving_list_rp0_s
{
  uint8_t status;
} aci_gap_configure_white_and_resolving_list_rp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_configuration_cp0_s
{
  uint8_t advertising_handle;
  uint16_t periodic_advertising_interval_min;
  uint16_t periodic_advertising_interval_max;
  uint16_t periodic_advertising_properties;
} aci_gap_set_periodic_advertising_configuration_cp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_configuration_rp0_s
{
  uint8_t status;
} aci_gap_set_periodic_advertising_configuration_rp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_data_nwk_cp0_s
{
  uint8_t advertising_handle;
  uint8_t operation;
  uint8_t advertising_data_length;
  uint8_t advertising_data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_gap_set_periodic_advertising_data_nwk_cp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_data_nwk_rp0_s
{
  uint8_t status;
} aci_gap_set_periodic_advertising_data_nwk_rp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_enable_cp0_s
{
  uint8_t enable;
  uint8_t advertising_handle;
} aci_gap_set_periodic_advertising_enable_cp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_enable_rp0_s
{
  uint8_t status;
} aci_gap_set_periodic_advertising_enable_rp0;

typedef PACKED(struct) aci_gap_periodic_advertising_create_sync_cp0_s
{
  uint8_t options;
  uint8_t advertising_sid;
  uint8_t advertising_address_type;
  uint8_t advertising_address[6];
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t sync_cte_type;
} aci_gap_periodic_advertising_create_sync_cp0;

typedef PACKED(struct) aci_gap_periodic_advertising_create_sync_rp0_s
{
  uint8_t status;
} aci_gap_periodic_advertising_create_sync_rp0;

typedef PACKED(struct) aci_gap_periodic_advertising_create_sync_cancel_rp0_s
{
  uint8_t status;
} aci_gap_periodic_advertising_create_sync_cancel_rp0;

typedef PACKED(struct) aci_gap_remove_advertising_set_cp0_s
{
  uint8_t advertising_handle;
} aci_gap_remove_advertising_set_cp0;

typedef PACKED(struct) aci_gap_remove_advertising_set_rp0_s
{
  uint8_t status;
} aci_gap_remove_advertising_set_rp0;

typedef PACKED(struct) aci_gap_clear_advertising_sets_rp0_s
{
  uint8_t status;
} aci_gap_clear_advertising_sets_rp0;

typedef PACKED(struct) aci_gap_periodic_advertising_terminate_sync_cp0_s
{
  uint16_t sync_handle;
} aci_gap_periodic_advertising_terminate_sync_cp0;

typedef PACKED(struct) aci_gap_periodic_advertising_terminate_sync_rp0_s
{
  uint8_t status;
} aci_gap_periodic_advertising_terminate_sync_rp0;

typedef PACKED(struct) aci_gap_add_device_to_periodic_advertiser_list_cp0_s
{
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertising_sid;
} aci_gap_add_device_to_periodic_advertiser_list_cp0;

typedef PACKED(struct) aci_gap_add_device_to_periodic_advertiser_list_rp0_s
{
  uint8_t status;
} aci_gap_add_device_to_periodic_advertiser_list_rp0;

typedef PACKED(struct) aci_gap_remove_device_from_periodic_advertising_list_cp0_s
{
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertising_sid;
} aci_gap_remove_device_from_periodic_advertising_list_cp0;

typedef PACKED(struct) aci_gap_remove_device_from_periodic_advertising_list_rp0_s
{
  uint8_t status;
} aci_gap_remove_device_from_periodic_advertising_list_rp0;

typedef PACKED(struct) aci_gap_clear_periodic_advertiser_list_rp0_s
{
  uint8_t status;
} aci_gap_clear_periodic_advertiser_list_rp0;

typedef PACKED(struct) aci_gap_read_periodic_advertiser_list_size_rp0_s
{
  uint8_t status;
  uint8_t periodic_advertiser_list_size;
} aci_gap_read_periodic_advertiser_list_size_rp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_receive_enable_cp0_s
{
  uint16_t sync_handle;
  uint8_t enable;
} aci_gap_set_periodic_advertising_receive_enable_cp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_receive_enable_rp0_s
{
  uint8_t status;
} aci_gap_set_periodic_advertising_receive_enable_rp0;

typedef PACKED(struct) aci_gap_periodic_advertising_sync_transfer_cp0_s
{
  uint16_t connection_handle;
  uint16_t service_data;
  uint16_t sync_handle;
} aci_gap_periodic_advertising_sync_transfer_cp0;

typedef PACKED(struct) aci_gap_periodic_advertising_sync_transfer_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} aci_gap_periodic_advertising_sync_transfer_rp0;

typedef PACKED(struct) aci_gap_periodic_advertising_set_info_transfer_cp0_s
{
  uint16_t connection_handle;
  uint16_t service_data;
  uint8_t advertising_handle;
} aci_gap_periodic_advertising_set_info_transfer_cp0;

typedef PACKED(struct) aci_gap_periodic_advertising_set_info_transfer_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} aci_gap_periodic_advertising_set_info_transfer_rp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_sync_transfer_parameters_cp0_s
{
  uint16_t connection_handle;
  uint8_t mode;
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t cte_type;
} aci_gap_set_periodic_advertising_sync_transfer_parameters_cp0;

typedef PACKED(struct) aci_gap_set_periodic_advertising_sync_transfer_parameters_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} aci_gap_set_periodic_advertising_sync_transfer_parameters_rp0;

typedef PACKED(struct) aci_gap_set_default_periodic_advertising_sync_transfer_parameters_cp0_s
{
  uint8_t mode;
  uint16_t skip;
  uint16_t sync_timeout;
  uint8_t cte_type;
} aci_gap_set_default_periodic_advertising_sync_transfer_parameters_cp0;

typedef PACKED(struct) aci_gap_set_default_periodic_advertising_sync_transfer_parameters_rp0_s
{
  uint8_t status;
} aci_gap_set_default_periodic_advertising_sync_transfer_parameters_rp0;

typedef PACKED(struct) aci_gatt_srv_init_rp0_s
{
  uint8_t status;
} aci_gatt_srv_init_rp0;

typedef PACKED(struct) aci_gatt_srv_add_service_nwk_cp0_s
{
  uint8_t service_uuid_type;
  packed_service_uuid_t Service_UUID;
} aci_gatt_srv_add_service_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_add_service_nwk_cp1_s
{
  uint8_t service_type;
  uint8_t max_attribute_records;
} aci_gatt_srv_add_service_nwk_cp1;

typedef PACKED(struct) aci_gatt_srv_add_service_nwk_rp0_s
{
  uint8_t status;
  uint16_t service_handle;
} aci_gatt_srv_add_service_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_include_service_nwk_cp0_s
{
  uint16_t service_handle;
  uint16_t included_service_handle;
} aci_gatt_srv_include_service_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_include_service_nwk_rp0_s
{
  uint8_t status;
  uint16_t include_handle;
} aci_gatt_srv_include_service_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_add_char_nwk_cp0_s
{
  uint16_t service_handle;
  uint8_t char_uuid_type;
  packed_char_uuid_t char_uuid;
} aci_gatt_srv_add_char_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_add_char_nwk_cp1_s
{
  uint16_t char_value_length;
  uint8_t char_properties;
  uint8_t security_permissions;
  uint8_t gatt_evt_mask;
  uint8_t enc_key_size;
  uint8_t is_variable;
} aci_gatt_srv_add_char_nwk_cp1;

typedef PACKED(struct) aci_gatt_srv_add_char_nwk_rp0_s
{
  uint8_t status;
  uint16_t char_handle;
} aci_gatt_srv_add_char_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_add_char_desc_nwk_cp0_s
{
  uint16_t char_handle;
  uint8_t char_desc_uuid_type;
  packed_char_desc_uuid_t char_desc_uuid;
} aci_gatt_srv_add_char_desc_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_add_char_desc_nwk_cp1_s
{
  uint16_t char_desc_value_max_len;
  uint16_t char_desc_value_length;
  uint8_t char_desc_value[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} aci_gatt_srv_add_char_desc_nwk_cp1;

typedef PACKED(struct) aci_gatt_srv_add_char_desc_nwk_cp2_s
{
  uint8_t security_permissions;
  uint8_t access_permissions;
  uint8_t gatt_evt_mask;
  uint8_t enc_key_size;
  uint8_t is_variable;
} aci_gatt_srv_add_char_desc_nwk_cp2;

typedef PACKED(struct) aci_gatt_srv_add_char_desc_nwk_rp0_s
{
  uint8_t status;
  uint16_t char_desc_handle;
} aci_gatt_srv_add_char_desc_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_write_handle_value_nwk_cp0_s
{
  uint16_t attr_handle;
  uint16_t val_offset;
  uint16_t value_length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_srv_write_handle_value_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_write_handle_value_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_write_handle_value_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_rm_char_nwk_cp0_s
{
  uint16_t char_handle;
} aci_gatt_srv_rm_char_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_rm_char_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_rm_char_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_rm_service_nwk_cp0_s
{
  uint16_t serv_handle;
} aci_gatt_srv_rm_service_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_rm_service_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_rm_service_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_rm_include_service_nwk_cp0_s
{
  uint16_t include_handle;
} aci_gatt_srv_rm_include_service_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_rm_include_service_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_rm_include_service_nwk_rp0;

typedef PACKED(struct) aci_gatt_set_event_mask_cp0_s
{
  uint32_t gatt_evt_mask;
} aci_gatt_set_event_mask_cp0;

typedef PACKED(struct) aci_gatt_set_event_mask_rp0_s
{
  uint8_t status;
} aci_gatt_set_event_mask_rp0;

typedef PACKED(struct) aci_gatt_clt_exchange_config_cp0_s
{
  uint16_t connection_handle;
} aci_gatt_clt_exchange_config_cp0;

typedef PACKED(struct) aci_gatt_clt_exchange_config_rp0_s
{
  uint8_t status;
} aci_gatt_clt_exchange_config_rp0;

typedef PACKED(struct) aci_gatt_clt_prepare_write_req_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t val_offset;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_gatt_clt_prepare_write_req_cp0;

typedef PACKED(struct) aci_gatt_clt_prepare_write_req_rp0_s
{
  uint8_t status;
} aci_gatt_clt_prepare_write_req_rp0;

typedef PACKED(struct) aci_gatt_clt_execute_write_req_cp0_s
{
  uint16_t connection_handle;
  uint8_t execute;
} aci_gatt_clt_execute_write_req_cp0;

typedef PACKED(struct) aci_gatt_clt_execute_write_req_rp0_s
{
  uint8_t status;
} aci_gatt_clt_execute_write_req_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_primary_services_cp0_s
{
  uint16_t connection_handle;
} aci_gatt_clt_disc_all_primary_services_cp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_primary_services_rp0_s
{
  uint8_t status;
} aci_gatt_clt_disc_all_primary_services_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_primary_service_by_uuid_cp0_s
{
  uint16_t connection_handle;
  uint8_t uuid_type;
  packed_uuid_t uuid;
} aci_gatt_clt_disc_primary_service_by_uuid_cp0;

typedef PACKED(struct) aci_gatt_clt_disc_primary_service_by_uuid_rp0_s
{
  uint8_t status;
} aci_gatt_clt_disc_primary_service_by_uuid_rp0;

typedef PACKED(struct) aci_gatt_clt_find_included_services_cp0_s
{
  uint16_t connection_handle;
  uint16_t start_handle;
  uint16_t end_handle;
} aci_gatt_clt_find_included_services_cp0;

typedef PACKED(struct) aci_gatt_clt_find_included_services_rp0_s
{
  uint8_t status;
} aci_gatt_clt_find_included_services_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_char_of_service_cp0_s
{
  uint16_t connection_handle;
  uint16_t start_handle;
  uint16_t end_handle;
} aci_gatt_clt_disc_all_char_of_service_cp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_char_of_service_rp0_s
{
  uint8_t status;
} aci_gatt_clt_disc_all_char_of_service_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_char_by_uuid_cp0_s
{
  uint16_t connection_handle;
  uint16_t start_handle;
  uint16_t end_handle;
  uint8_t uuid_type;
  packed_uuid_t uuid;
} aci_gatt_clt_disc_char_by_uuid_cp0;

typedef PACKED(struct) aci_gatt_clt_disc_char_by_uuid_rp0_s
{
  uint8_t status;
} aci_gatt_clt_disc_char_by_uuid_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_char_desc_cp0_s
{
  uint16_t connection_handle;
  uint16_t char_handle;
  uint16_t end_handle;
} aci_gatt_clt_disc_all_char_desc_cp0;

typedef PACKED(struct) aci_gatt_clt_disc_all_char_desc_rp0_s
{
  uint8_t status;
} aci_gatt_clt_disc_all_char_desc_rp0;

typedef PACKED(struct) aci_gatt_clt_read_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
} aci_gatt_clt_read_cp0;

typedef PACKED(struct) aci_gatt_clt_read_rp0_s
{
  uint8_t status;
} aci_gatt_clt_read_rp0;

typedef PACKED(struct) aci_gatt_clt_read_using_char_uuid_cp0_s
{
  uint16_t connection_handle;
  uint16_t start_handle;
  uint16_t end_handle;
  uint8_t uuid_type;
  packed_uuid_t uuid;
} aci_gatt_clt_read_using_char_uuid_cp0;

typedef PACKED(struct) aci_gatt_clt_read_using_char_uuid_rp0_s
{
  uint8_t status;
} aci_gatt_clt_read_using_char_uuid_rp0;

typedef PACKED(struct) aci_gatt_clt_read_long_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t val_offset;
} aci_gatt_clt_read_long_cp0;

typedef PACKED(struct) aci_gatt_clt_read_long_rp0_s
{
  uint8_t status;
} aci_gatt_clt_read_long_rp0;

typedef PACKED(struct) aci_gatt_clt_read_multiple_char_value_cp0_s
{
  uint16_t connection_handle;
  uint8_t number_of_handles;
  packed_handle_entry_t handle_entry[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(packed_handle_entry_t)];
} aci_gatt_clt_read_multiple_char_value_cp0;

typedef PACKED(struct) aci_gatt_clt_read_multiple_char_value_rp0_s
{
  uint8_t status;
} aci_gatt_clt_read_multiple_char_value_rp0;

typedef PACKED(struct) aci_gatt_clt_write_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_clt_write_nwk_cp0;

typedef PACKED(struct) aci_gatt_clt_write_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_clt_write_nwk_rp0;

typedef PACKED(struct) aci_gatt_clt_write_long_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t val_offset;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_gatt_clt_write_long_nwk_cp0;

typedef PACKED(struct) aci_gatt_clt_write_long_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_clt_write_long_nwk_rp0;

typedef PACKED(struct) aci_gatt_clt_write_char_reliable_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t val_offset;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_gatt_clt_write_char_reliable_nwk_cp0;

typedef PACKED(struct) aci_gatt_clt_write_char_reliable_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_clt_write_char_reliable_nwk_rp0;

typedef PACKED(struct) aci_gatt_clt_write_without_resp_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_clt_write_without_resp_cp0;

typedef PACKED(struct) aci_gatt_clt_write_without_resp_rp0_s
{
  uint8_t status;
} aci_gatt_clt_write_without_resp_rp0;

typedef PACKED(struct) aci_gatt_clt_signed_write_without_resp_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t attribute_val_length;
  uint8_t attribute_val[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_clt_signed_write_without_resp_cp0;

typedef PACKED(struct) aci_gatt_clt_signed_write_without_resp_rp0_s
{
  uint8_t status;
} aci_gatt_clt_signed_write_without_resp_rp0;

typedef PACKED(struct) aci_gatt_clt_confirm_indication_cp0_s
{
  uint16_t connection_handle;
} aci_gatt_clt_confirm_indication_cp0;

typedef PACKED(struct) aci_gatt_clt_confirm_indication_rp0_s
{
  uint8_t status;
} aci_gatt_clt_confirm_indication_rp0;

typedef PACKED(struct) aci_gatt_srv_set_security_permission_nwk_cp0_s
{
  uint16_t attr_handle;
  uint8_t security_permissions;
} aci_gatt_srv_set_security_permission_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_set_security_permission_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_set_security_permission_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_read_handle_value_nwk_cp0_s
{
  uint16_t attr_handle;
  uint16_t offset;
  uint16_t value_length_requested;
} aci_gatt_srv_read_handle_value_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_read_handle_value_nwk_rp0_s
{
  uint8_t status;
  uint16_t length;
  uint16_t value_length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_gatt_srv_read_handle_value_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_set_access_permission_nwk_cp0_s
{
  uint16_t attr_handle;
  uint8_t access_permissions;
} aci_gatt_srv_set_access_permission_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_set_access_permission_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_set_access_permission_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_notify_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint8_t flags;
  uint16_t val_length;
  uint8_t val[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} aci_gatt_srv_notify_cp0;

typedef PACKED(struct) aci_gatt_srv_notify_rp0_s
{
  uint8_t status;
} aci_gatt_srv_notify_rp0;

typedef PACKED(struct) aci_gatt_srv_exec_write_resp_nwk_cp0_s
{
  uint16_t conn_handle;
  uint8_t exec;
} aci_gatt_srv_exec_write_resp_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_exec_write_resp_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_exec_write_resp_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_authorize_resp_nwk_cp0_s
{
  uint16_t conn_handle;
  uint16_t attr_handle;
  uint8_t operation_type;
  uint8_t error_code;
  uint16_t attr_val_offset;
  uint16_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 10) / sizeof(uint8_t)];
} aci_gatt_srv_authorize_resp_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_authorize_resp_nwk_rp0_s
{
  uint8_t status;
} aci_gatt_srv_authorize_resp_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_read_prepare_queue_nwk_cp0_s
{
  uint16_t conn_handle;
  uint8_t item_index;
} aci_gatt_srv_read_prepare_queue_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_read_prepare_queue_nwk_rp0_s
{
  uint8_t status;
  uint16_t attr_handle;
  uint16_t value_offset;
  uint16_t value_length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} aci_gatt_srv_read_prepare_queue_nwk_rp0;

typedef PACKED(struct) aci_gatt_srv_write_multiple_instance_handle_value_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t value_length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_srv_write_multiple_instance_handle_value_cp0;

typedef PACKED(struct) aci_gatt_srv_write_multiple_instance_handle_value_rp0_s
{
  uint8_t status;
} aci_gatt_srv_write_multiple_instance_handle_value_rp0;

typedef PACKED(struct) aci_gatt_srv_read_multiple_instance_handle_value_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
} aci_gatt_srv_read_multiple_instance_handle_value_nwk_cp0;

typedef PACKED(struct) aci_gatt_srv_read_multiple_instance_handle_value_nwk_rp0_s
{
  uint8_t status;
  uint16_t value_length;
  uint8_t value[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_gatt_srv_read_multiple_instance_handle_value_nwk_rp0;

typedef PACKED(struct) aci_l2cap_connection_parameter_update_req_cp0_s
{
  uint16_t connection_handle;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t slave_latency;
  uint16_t timeout_multiplier;
} aci_l2cap_connection_parameter_update_req_cp0;

typedef PACKED(struct) aci_l2cap_connection_parameter_update_req_rp0_s
{
  uint8_t status;
} aci_l2cap_connection_parameter_update_req_rp0;

typedef PACKED(struct) aci_l2cap_connection_parameter_update_resp_cp0_s
{
  uint16_t connection_handle;
  uint16_t conn_interval_min;
  uint16_t conn_interval_max;
  uint16_t slave_latency;
  uint16_t timeout_multiplier;
  uint16_t minimum_ce_length;
  uint16_t maximum_ce_length;
  uint8_t identifier;
  uint8_t accept;
} aci_l2cap_connection_parameter_update_resp_cp0;

typedef PACKED(struct) aci_l2cap_connection_parameter_update_resp_rp0_s
{
  uint8_t status;
} aci_l2cap_connection_parameter_update_resp_rp0;

typedef PACKED(struct) aci_l2cap_cfc_connection_req_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t spsm;
  uint16_t cid;
  uint16_t mtu;
  uint16_t mps;
  uint8_t cfc_policy;
} aci_l2cap_cfc_connection_req_nwk_cp0;

typedef PACKED(struct) aci_l2cap_cfc_connection_req_nwk_rp0_s
{
  uint8_t status;
} aci_l2cap_cfc_connection_req_nwk_rp0;

typedef PACKED(struct) aci_l2cap_cfc_connection_resp_nwk_cp0_s
{
  uint16_t connection_handle;
  uint8_t identifier;
  uint16_t cid;
  uint16_t mtu;
  uint16_t mps;
  uint16_t result;
  uint8_t cfc_policy;
} aci_l2cap_cfc_connection_resp_nwk_cp0;

typedef PACKED(struct) aci_l2cap_cfc_connection_resp_nwk_rp0_s
{
  uint8_t status;
} aci_l2cap_cfc_connection_resp_nwk_rp0;

typedef PACKED(struct) aci_l2cap_send_flow_control_credits_cp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
  uint16_t rx_credits;
  uint8_t cfc_policy;
} aci_l2cap_send_flow_control_credits_cp0;

typedef PACKED(struct) aci_l2cap_send_flow_control_credits_rp0_s
{
  uint8_t status;
  uint16_t rx_credit_balance;
} aci_l2cap_send_flow_control_credits_rp0;

typedef PACKED(struct) aci_l2cap_disconnect_cp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
} aci_l2cap_disconnect_cp0;

typedef PACKED(struct) aci_l2cap_disconnect_rp0_s
{
  uint8_t status;
} aci_l2cap_disconnect_rp0;

typedef PACKED(struct) aci_l2cap_transmit_sdu_data_nwk_cp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
  uint16_t sdu_length;
  uint8_t sdu_data[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_l2cap_transmit_sdu_data_nwk_cp0;

typedef PACKED(struct) aci_l2cap_transmit_sdu_data_nwk_rp0_s
{
  uint8_t status;
} aci_l2cap_transmit_sdu_data_nwk_rp0;

typedef PACKED(struct) aci_test_tx_notification_start_cp0_s
{
  uint16_t connection_handle;
  uint16_t service_handle;
  uint16_t char_handle;
  uint16_t value_length;
} aci_test_tx_notification_start_cp0;

typedef PACKED(struct) aci_test_tx_notification_start_rp0_s
{
  uint8_t status;
} aci_test_tx_notification_start_rp0;

typedef PACKED(struct) aci_test_tx_write_command_start_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t value_length;
} aci_test_tx_write_command_start_cp0;

typedef PACKED(struct) aci_test_tx_write_command_start_rp0_s
{
  uint8_t status;
} aci_test_tx_write_command_start_rp0;

typedef PACKED(struct) aci_test_rx_start_cp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint8_t notifications_write_cmds;
} aci_test_rx_start_cp0;

typedef PACKED(struct) aci_test_rx_start_rp0_s
{
  uint8_t status;
} aci_test_rx_start_rp0;

typedef PACKED(struct) aci_test_stop_cp0_s
{
  uint8_t tx_rx;
} aci_test_stop_cp0;

typedef PACKED(struct) aci_test_stop_rp0_s
{
  uint8_t status;
} aci_test_stop_rp0;

typedef PACKED(struct) aci_test_report_rp0_s
{
  uint8_t status;
  uint32_t tx_packets;
  uint32_t rx_packets;
  uint16_t rx_data_length;
  uint32_t rx_sequence_errors;
} aci_test_report_rp0;

typedef PACKED(struct) hci_disconnection_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t reason;
} hci_disconnection_complete_event_rp0;

typedef PACKED(struct) hci_encryption_change_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t encryption_enabled;
} hci_encryption_change_event_rp0;

typedef PACKED(struct) hci_read_remote_version_information_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t version;
  uint16_t manufacturer_name;
  uint16_t subversion;
} hci_read_remote_version_information_complete_event_rp0;

typedef PACKED(struct) hci_hardware_error_event_rp0_s
{
  uint8_t hardware_code;
} hci_hardware_error_event_rp0;

typedef PACKED(struct) hci_number_of_completed_packets_event_rp0_s
{
  uint8_t number_of_handles;
  packed_handle_packets_pair_entry_t handle_packets_pair_entry[(HCI_MAX_PAYLOAD_SIZE - 1) /
                                                               sizeof(packed_handle_packets_pair_entry_t)];
} hci_number_of_completed_packets_event_rp0;

typedef PACKED(struct) hci_data_buffer_overflow_event_rp0_s
{
  uint8_t link_type;
} hci_data_buffer_overflow_event_rp0;

typedef PACKED(struct) hci_encryption_key_refresh_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_encryption_key_refresh_complete_event_rp0;

typedef PACKED(struct) hci_authenticated_payload_timeout_expired_event_rp0_s
{
  uint16_t connection_handle;
} hci_authenticated_payload_timeout_expired_event_rp0;

typedef PACKED(struct) aci_blue_initialized_event_rp0_s
{
  uint8_t reason_code;
} aci_blue_initialized_event_rp0;

typedef PACKED(struct) aci_blue_events_lost_event_rp0_s
{
  uint8_t lost_events[8];
} aci_blue_events_lost_event_rp0;

typedef PACKED(struct) aci_blue_crash_info_event_rp0_s
{
  uint8_t crash_type;
  uint32_t sp;
  uint32_t r0;
  uint32_t r1;
  uint32_t r2;
  uint32_t r3;
  uint32_t r12;
  uint32_t lr;
  uint32_t pc;
  uint32_t x_psr;
  uint8_t debug_data_length;
  uint8_t debug_data[(HCI_MAX_PAYLOAD_SIZE - 38) / sizeof(uint8_t)];
} aci_blue_crash_info_event_rp0;

typedef PACKED(struct) aci_hal_end_of_radio_activity_event_rp0_s
{
  uint8_t last_state;
  uint8_t next_state;
  uint32_t next_state_sys_time;
} aci_hal_end_of_radio_activity_event_rp0;

typedef PACKED(struct) aci_hal_scan_req_report_event_rp0_s
{
  int8_t rssi;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
} aci_hal_scan_req_report_event_rp0;

typedef PACKED(struct) aci_hal_fw_error_event_rp0_s
{
  uint8_t fw_error_type;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 2) / sizeof(uint8_t)];
} aci_hal_fw_error_event_rp0;

typedef PACKED(struct) aci_hal_le_test_end_event_rp0_s
{
  uint16_t number_of_packets;
} aci_hal_le_test_end_event_rp0;

typedef PACKED(struct) aci_gap_pairing_complete_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t status;
  uint8_t reason;
} aci_gap_pairing_complete_event_rp0;

typedef PACKED(struct) aci_gap_pass_key_req_event_rp0_s
{
  uint16_t connection_handle;
} aci_gap_pass_key_req_event_rp0;

typedef PACKED(struct) aci_gap_proc_complete_event_rp0_s
{
  uint8_t procedure_code;
  uint8_t status;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_gap_proc_complete_event_rp0;

typedef PACKED(struct) aci_gap_addr_not_resolved_event_rp0_s
{
  uint16_t connection_handle;
} aci_gap_addr_not_resolved_event_rp0;

typedef PACKED(struct) aci_gap_numeric_comparison_value_event_rp0_s
{
  uint16_t connection_handle;
  uint32_t numeric_value;
} aci_gap_numeric_comparison_value_event_rp0;

typedef PACKED(struct) aci_gap_keypress_notification_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t notification_type;
} aci_gap_keypress_notification_event_rp0;

typedef PACKED(struct) aci_l2cap_connection_update_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t result;
} aci_l2cap_connection_update_resp_event_rp0;

typedef PACKED(struct) aci_l2cap_proc_timeout_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 3) / sizeof(uint8_t)];
} aci_l2cap_proc_timeout_event_rp0;

typedef PACKED(struct) aci_l2cap_connection_update_req_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t identifier;
  uint16_t l2_cap_length;
  uint16_t interval_min;
  uint16_t interval_max;
  uint16_t slave_latency;
  uint16_t timeout_multiplier;
} aci_l2cap_connection_update_req_event_rp0;

typedef PACKED(struct) aci_l2cap_cfc_connection_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t event_type;
  uint16_t result;
  uint8_t identifier;
  uint16_t spsm;
  uint16_t cid;
  uint16_t remote_cid;
  uint16_t peer_mtu;
  uint16_t peer_mps;
  uint16_t initial_credits;
} aci_l2cap_cfc_connection_event_rp0;

typedef PACKED(struct) aci_l2cap_disconnection_complete_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
} aci_l2cap_disconnection_complete_event_rp0;

typedef PACKED(struct) aci_l2cap_flow_control_credit_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
  uint16_t tx_credits;
  uint16_t tx_credit_balance;
} aci_l2cap_flow_control_credit_event_rp0;

typedef PACKED(struct) aci_l2cap_sdu_data_tx_nwk_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
  uint16_t sdu_length;
  uint16_t tx_credit_balance;
} aci_l2cap_sdu_data_tx_nwk_event_rp0;

typedef PACKED(struct) aci_l2cap_sdu_data_rx_nwk_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t cid;
  uint16_t rx_credit_balance;
  uint16_t sdu_length;
  uint8_t sdu_data[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_l2cap_sdu_data_rx_nwk_event_rp0;

typedef PACKED(struct) aci_l2cap_command_reject_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t identifier;
  uint16_t reason;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_l2cap_command_reject_event_rp0;

typedef PACKED(struct) aci_gatt_srv_attribute_modified_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t attr_handle;
  uint16_t attr_data_length;
  uint8_t attr_data[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_srv_attribute_modified_event_rp0;

typedef PACKED(struct) aci_gatt_proc_timeout_event_rp0_s
{
  uint16_t connection_handle;
} aci_gatt_proc_timeout_event_rp0;

typedef PACKED(struct) aci_att_exchange_mtu_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t server_rx_mtu;
} aci_att_exchange_mtu_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_find_info_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t format;
  uint16_t event_data_length;
  uint8_t handle_uuid_pair[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_att_clt_find_info_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_find_by_type_value_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t num_of_handle_pair;
  packed_attribute_group_handle_pair_t attr_group_handle_pair[(HCI_MAX_PAYLOAD_SIZE - 3) /
                                                              sizeof(packed_attribute_group_handle_pair_t)];
} aci_att_clt_find_by_type_value_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_read_by_type_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t handle_value_pair_length;
  uint16_t data_length;
  uint8_t handle_value_pair_data[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_att_clt_read_by_type_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_read_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t event_data_length;
  uint8_t attribute_value[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} aci_att_clt_read_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_read_blob_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t event_data_length;
  uint8_t attribute_value[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} aci_att_clt_read_blob_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_read_multiple_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t event_data_length;
  uint8_t set_of_values[(HCI_MAX_PAYLOAD_SIZE - 4) / sizeof(uint8_t)];
} aci_att_clt_read_multiple_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_read_by_group_type_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t Attribute_Data_Length;
  uint16_t data_length;
  uint8_t attribute_data_list[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_att_clt_read_by_group_type_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_prepare_write_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t attribute_handle;
  uint16_t offset;
  uint16_t part_attribute_value_length;
  uint8_t part_attribute_value[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_att_clt_prepare_write_resp_event_rp0;

typedef PACKED(struct) aci_att_clt_exec_write_resp_event_rp0_s
{
  uint16_t connection_handle;
} aci_att_clt_exec_write_resp_event_rp0;

typedef PACKED(struct) aci_gatt_clt_indication_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t attribute_handle;
  uint16_t attribute_value_length;
  uint8_t attribute_value[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_clt_indication_event_rp0;

typedef PACKED(struct) aci_gatt_clt_notification_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t attribute_handle;
  uint16_t attribute_value_length;
  uint8_t attribute_value[(HCI_MAX_PAYLOAD_SIZE - 6) / sizeof(uint8_t)];
} aci_gatt_clt_notification_event_rp0;

typedef PACKED(struct) aci_gatt_clt_proc_complete_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t error_code;
} aci_gatt_clt_proc_complete_event_rp0;

typedef PACKED(struct) aci_gatt_clt_error_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t req_op_code;
  uint16_t attribute_handle;
  uint8_t error_code;
} aci_gatt_clt_error_resp_event_rp0;

typedef PACKED(struct) aci_gatt_clt_disc_read_char_by_uuid_resp_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t attribute_handle;
  uint8_t attribute_value_length;
  uint8_t attribute_value[(HCI_MAX_PAYLOAD_SIZE - 5) / sizeof(uint8_t)];
} aci_gatt_clt_disc_read_char_by_uuid_resp_event_rp0;

typedef PACKED(struct) aci_gatt_tx_pool_available_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t available_buffers;
} aci_gatt_tx_pool_available_event_rp0;

typedef PACKED(struct) aci_gatt_srv_confirmation_event_rp0_s
{
  uint16_t connection_handle;
} aci_gatt_srv_confirmation_event_rp0;

typedef PACKED(struct) aci_att_srv_exec_write_req_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t flags;
} aci_att_srv_exec_write_req_event_rp0;

typedef PACKED(struct) aci_gatt_srv_authorize_nwk_event_rp0_s
{
  uint16_t conn_handle;
  uint16_t attr_handle;
  uint8_t operation_type;
  uint16_t attr_val_offset;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 8) / sizeof(uint8_t)];
} aci_gatt_srv_authorize_nwk_event_rp0;

typedef PACKED(struct) hci_le_connection_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t role;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint16_t conn_interval;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint8_t master_clock_accuracy;
} hci_le_connection_complete_event_rp0;

typedef PACKED(struct) hci_le_advertising_report_event_rp0_s
{
  uint8_t num_reports;
  packed_advertising_report_t advertising_report[(HCI_MAX_PAYLOAD_SIZE - 1) / sizeof(packed_advertising_report_t)];
} hci_le_advertising_report_event_rp0;

typedef PACKED(struct) hci_le_connection_update_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint16_t conn_interval;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
} hci_le_connection_update_complete_event_rp0;

typedef PACKED(struct) hci_le_read_remote_used_features_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t le_features[8];
} hci_le_read_remote_used_features_complete_event_rp0;

typedef PACKED(struct) hci_le_long_term_key_request_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t random_number[8];
  uint16_t encrypted_diversifier;
} hci_le_long_term_key_request_event_rp0;

typedef PACKED(struct) hci_le_data_length_change_event_rp0_s
{
  uint16_t connection_handle;
  uint16_t max_tx_octets;
  uint16_t max_tx_time;
  uint16_t max_rx_octets;
  uint16_t max_rx_time;
} hci_le_data_length_change_event_rp0;

typedef PACKED(struct) hci_le_read_local_p256_public_key_complete_event_rp0_s
{
  uint8_t status;
  uint8_t local_p256_public_key[64];
} hci_le_read_local_p256_public_key_complete_event_rp0;

typedef PACKED(struct) hci_le_generate_dhkey_complete_event_rp0_s
{
  uint8_t status;
  uint8_t dh_key[32];
} hci_le_generate_dhkey_complete_event_rp0;

typedef PACKED(struct) hci_le_enhanced_connection_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t role;
  uint8_t peer_address_type;
  uint8_t peer_address[6];
  uint8_t local_resolvable_private_address[6];
  uint8_t peer_resolvable_private_address[6];
  uint16_t conn_interval;
  uint16_t conn_latency;
  uint16_t supervision_timeout;
  uint8_t master_clock_accuracy;
} hci_le_enhanced_connection_complete_event_rp0;

typedef PACKED(struct) hci_le_direct_advertising_report_event_rp0_s
{
  uint8_t num_reports;
  packed_direct_advertising_report_t direct_advertising_report[(HCI_MAX_PAYLOAD_SIZE - 1) /
                                                               sizeof(packed_direct_advertising_report_t)];
} hci_le_direct_advertising_report_event_rp0;

typedef PACKED(struct) hci_le_phy_update_complete_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t tx_phy;
  uint8_t rx_phy;
} hci_le_phy_update_complete_event_rp0;

typedef PACKED(struct) hci_le_extended_advertising_report_event_rp0_s
{
  uint8_t num_reports;
  packed_extended_advertising_report_t extended_adv_report[(HCI_MAX_PAYLOAD_SIZE - 1) /
                                                           sizeof(packed_extended_advertising_report_t)];
} hci_le_extended_advertising_report_event_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_sync_established_event_rp0_s
{
  uint8_t status;
  uint16_t sync_handle;
  uint8_t advertising_sid;
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertiser_phy;
  uint16_t periodic_advertising_interval;
  uint8_t advertiser_clock_accuracy;
} hci_le_periodic_advertising_sync_established_event_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_report_event_rp0_s
{
  uint16_t sync_handle;
  int8_t tx_power;
  int8_t rssi;
  uint8_t cte_type;
  uint8_t data_status;
  uint8_t data_length;
  uint8_t data[(HCI_MAX_PAYLOAD_SIZE - 7) / sizeof(uint8_t)];
} hci_le_periodic_advertising_report_event_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_sync_lost_event_rp0_s
{
  uint16_t sync_handle;
} hci_le_periodic_advertising_sync_lost_event_rp0;

typedef PACKED(struct) hci_le_advertising_set_terminated_event_rp0_s
{
  uint8_t status;
  uint8_t advertising_handle;
  uint16_t connection_handle;
  uint8_t num_completed_extended_advertising_events;
} hci_le_advertising_set_terminated_event_rp0;

typedef PACKED(struct) hci_le_scan_request_received_event_rp0_s
{
  uint8_t advertising_handle;
  uint8_t scanner_address_type;
  uint8_t scanner_address[6];
} hci_le_scan_request_received_event_rp0;

typedef PACKED(struct) hci_le_channel_selection_algorithm_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t channel_selection_algorithm;
} hci_le_channel_selection_algorithm_event_rp0;

typedef PACKED(struct) hci_le_connectionless_iq_report_event_rp0_s
{
  uint16_t sync_handle;
  uint8_t channel_index;
  int16_t rssi;
  uint8_t rssi_antenna_id;
  uint8_t cte_type;
  uint8_t slot_durations;
  uint8_t packet_status;
  uint16_t periodic_event_counter;
  uint8_t sample_count;
  packed_samples_t Samples[(HCI_MAX_PAYLOAD_SIZE - 12) / sizeof(packed_samples_t)];
} hci_le_connectionless_iq_report_event_rp0;

typedef PACKED(struct) hci_le_connection_iq_report_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t rx_phy;
  uint8_t data_channel_index;
  int16_t rssi;
  uint8_t rssi_antenna_id;
  uint8_t cte_type;
  uint8_t slot_durations;
  uint8_t packet_status;
  uint16_t connection_event_counter;
  uint8_t sample_count;
  packed_samples_t Samples[(HCI_MAX_PAYLOAD_SIZE - 13) / sizeof(packed_samples_t)];
} hci_le_connection_iq_report_event_rp0;

typedef PACKED(struct) hci_le_cte_request_failed_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
} hci_le_cte_request_failed_event_rp0;

typedef PACKED(struct) hci_le_periodic_advertising_sync_transfer_received_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint16_t service_data;
  uint16_t sync_handle;
  uint8_t advertising_sid;
  uint8_t advertiser_address_type;
  uint8_t advertising_address[6];
  uint8_t advertiser_phy;
  uint16_t periodic_advertising_interval;
  uint8_t advertiser_clock_accuracy;
} hci_le_periodic_advertising_sync_transfer_received_event_rp0;

typedef PACKED(struct) hci_le_path_loss_threshold_event_rp0_s
{
  uint16_t connection_handle;
  uint8_t current_path_loss;
  uint8_t zone_entered;
} hci_le_path_loss_threshold_event_rp0;

typedef PACKED(struct) hci_le_transmit_power_reporting_event_rp0_s
{
  uint8_t status;
  uint16_t connection_handle;
  uint8_t reason;
  uint8_t phy;
  int8_t transmit_power_level;
  uint8_t Transmit_Power_Level_Flag;
  int8_t delta;
} hci_le_transmit_power_reporting_event_rp0;

#ifdef __cplusplus
}
#endif

#endif /* _BLUENRG_LP_TYPES_H_ */
