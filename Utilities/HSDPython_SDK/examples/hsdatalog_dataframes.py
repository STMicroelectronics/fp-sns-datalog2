#!/usr/bin/env python
# coding: utf-8 
# *****************************************************************************
#  * @file    hsdatalog_dataframes.py
#  * @author  SRA
# ******************************************************************************
# * @attention
# *
# * Copyright (c) 2022 STMicroelectronics.
# * All rights reserved.
# *
# * This software is licensed under terms that can be found in the LICENSE file
# * in the root directory of this software component.
# * If no LICENSE file comes with this software, it is provided AS-IS.
# *
# *
# ******************************************************************************
#

"""
This script, `hsdatalog_dataframes.py`, is designed to extract pandas dataframes from acquisition
folders generated by STMicroelectronics' HSDatalog tool. It supports various options for customizing
the data extraction, including selecting specific sensors, setting time ranges, extracting raw data,
including annotations, and more.
It uses Click for command-line interface options and logs information and errors during execution.
The script can be run from the command line with various options to tailor the data extraction
to the user's needs.

Key Features:
- Extract dataframes for specific sensors or all active components.
- Set start and end times for the data extraction.
- Option to extract raw data.
- Include annotations in the extracted dataframes.
- Filter data by tag labels.
- Specify the size of each data chunk to be processed.
- Upload and use a custom Device Template Model (DTDL).
- Enable debug mode to check for corrupted data and timestamps.
"""

import click
from st_hsdatalog.HSD_utils.dtm import HSDatalogDTM
from st_hsdatalog.HSD_utils.exceptions import MissingDeviceModelError, MissingTagsException, MissingISPUOutputDescriptorException
import st_hsdatalog.HSD_utils.logger as logger
from st_hsdatalog.HSD.HSDatalog import HSDatalog

# Set up the application logger to record debug information and errors
log = logger.setup_applevel_logger(is_debug = False, file_name= "app_debug.log")

# Define the script version for reference
script_version = "2.1.0"

# Define a callback function to show help information
def show_help(ctx, param, value):
    if value and not ctx.resilient_parsing:
        # Display the help information for the command
        click.secho(ctx.get_help(), color=ctx.color)
        # Display examples of script execution
        click.secho("\n-> Script execution examples:")
        # This command will extract dataframes for all active sensors from the specified acquisition folder.
        click.secho("   python hsdatalog_dataframes.py Acquisition_Folder_Path -s all", fg='cyan')
        # This command will extract dataframes for all active sensors and include annotations in the output.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -s all -l", fg='cyan')
        # This command will extract raw dataframes (not multiplied by sensitivity) for a specific sensor named SENSOR_NAME.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -s SENSOR_NAME -r", fg='cyan')
        # This command will extract dataframes for the sensor SENSOR_NAME, starting from 3 seconds and ending at 6 seconds.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -st 3 -et 6 -s SENSOR_NAME", fg='cyan')
        # This command will extract dataframes for all active sensors, but only include entries that have the tag labels SW_TAG_0 or SW_TAG_2.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -tl SW_TAG_0 -tl SW_TAG_2 -s all", fg='cyan')
        # This command will upload a custom Device Template Model (DTDL) "custom_model.json" with board_id=0xff, fw_id=0xff and extract dataframes for the sensor SENSOR_NAME.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -cdm 255 255 custom_model.json -s SENSOR_NAME", fg='cyan')
        # This command will specify the size of each data chunk to be 1000 samples for the sensor SENSOR_NAME.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -cs 1000 -s SENSOR_NAME", fg='cyan')
        # This command will extract dataframes for the sensor SENSOR_NAME and check for corrupted data and timestamps.
        click.secho("   python hsdatalog_dataframes.py path_to_acquisition_folder -d -s SENSOR_NAME", fg='cyan')
        # Exit the context after showing help
        ctx.exit()

# Define the click command with options for the data export script
@click.command()
@click.argument('acq_folder', type=click.Path(exists=True))
@click.option('-s', '--sensor_name', help="Sensor Name - use \"all\" to obtain all active sensors dataframes, otherwise select a specific sensor by name", default='')
@click.option('-st','--start_time', help="Start Time - Data conversion will start from this time (seconds)", type=int, default=0)
@click.option('-et','--end_time', help="End Time - Data conversion will end up in this time (seconds)", type=int, default=-1)
@click.option('-r', '--raw_data', is_flag=True, help="Uses Raw data (not multiplied by sensitivity)", default=False)
@click.option('-l', '--labeled', is_flag=True, help="Includes annotations taken during acquisition (if any) in the extracted dataframe", default=False)
@click.option('-tl', '--tag_labels', multiple=True, help='A list of tag labels strings to filter and include only the corresponding entries in the output dataframe')
@click.option('-cdm','--custom_device_model', help="Upload a custom Device Template Model (DTDL)", type=(int, int, str))
@click.option('-cs', '--chunk_size', help="Specify the size (number of samples) of each data chunk to be processed", default=HSDatalog.DEFAULT_SAMPLES_CHUNK_SIZE)
@click.version_option(script_version, '-v', '--version', prog_name="hsdatalog_dataframes", is_flag=True, help="hsdatalog_dataframes tool version number")
@click.option('-d', '--debug', is_flag=True, help="[DEBUG] Check for corrupted data and timestamps", default=False)
@click.option("-h", "--help", is_flag=True, is_eager=True, expose_value=False, callback=show_help, help="Show this message and exit.",)

# Define the main function that will be executed when the script is run
def hsd_dataframe(acq_folder, sensor_name, start_time, end_time, raw_data, labeled, tag_labels, custom_device_model, chunk_size, debug):

    # If a custom device model is provided, upload it
    if custom_device_model is not None:
        HSDatalogDTM.upload_custom_dtm(custom_device_model)

    # Create an instance of the HSDatalog factory
    hsd_factory = HSDatalog()
    try:
        # Create an HSDatalog object for the given acquisition folder
        hsd = hsd_factory.create_hsd(acq_folder)
    except MissingDeviceModelError as error:
        # Handle the case where the device model is missing
        log.error("Device Template Model identifyed by [{}] not supported".format(error))
        log.info("Check your input acquisition folder, then try to upload a custom Device Template Model using -cdm flag".format(error))
        return
    
    # Process tag labels if provided as selection filter
    which_tags = []
    if len(tag_labels) > 0:
        which_tags = list(tag_labels)
        labeled = True

    # Enable timestamp recovery if debug mode is active
    hsd.enable_timestamp_recovery(debug)

    # Process dataframes based on the sensor name provided
    df_flag = True
    while df_flag:
        # If no sensor name is provided, ask the user to select a component
        if sensor_name == '':
            component = HSDatalog.ask_for_component(hsd, only_active=True)
            # If a component is selected, extract a dataframe from its data
            if component is not None:
                df = extract_dataframe(hsd, component, start_time, end_time, labeled, which_tags, raw_data, chunk_size, acq_folder)
                if df is not None:
                    [log.info("\nDataFrame - Start time: {}, End time: {}\n{}".format(start_time, x.values[-1][0] , x)) for x in df if not x.empty]
            else:
                break
        # If 'all' is specified for sensor name, process all active components
        elif sensor_name == 'all':
            component_list = HSDatalog.get_all_components(hsd, only_active=True)
            for component in component_list:
                df = extract_dataframe(hsd, component, start_time, end_time, labeled, which_tags, raw_data, chunk_size, acq_folder)
                if not (df is None or len(df) == 0):
                    for d in df:
                        log.info("\nDataFrame - Start time: {}, End time: {}\n{}".format(start_time, d.values[-1][0] ,d))
            df_flag = False
        # If a specific sensor name is provided, process only that component
        else:
            component = HSDatalog.get_component(hsd, sensor_name)
            if component is not None:
                df = extract_dataframe(hsd, component, start_time, end_time, labeled, which_tags, raw_data, chunk_size, acq_folder)
                if df is not None:
                    [log.info("\nDataFrame - Start time: {}, End time: {}\n{}".format(start_time, x.values[-1][0] , x)) for x in df if not x.empty]
            else:
                # Log an error if the specified component is not found
                log.error("No \"{}\" Component found in your Device Configuration file.".format(sensor_name))
            df_flag = False

# Define a helper function to extract dataframes
def extract_dataframe(hsd, component, start_time, end_time, labeled, which_tags, raw_data, chunk_size, acq_folder):
    try:
        # Attempt to convert data to text by tags
        df = HSDatalog.get_dataframe(hsd, component, start_time, end_time, labeled, raw_data, which_tags, chunk_size)
        return df
    except MissingTagsException as tags_err:
        # Handle missing tags exception
        log.error(tags_err)
        log.warning("Check \"tags\" field in your acquisition_info.json file (AcquisitionInfo.json for HSDv1 acquisitions)")
        quit()
    except MissingISPUOutputDescriptorException as ispu_err:
        # Handle missing ISPU output descriptor exception
        log.error(ispu_err)
        log.warning("Copy the right ISPU output descriptor file in your \"{}\" acquisition folder renamed as \"ispu_output_format.json\"".format(acq_folder))
    except Exception as err:
        log.exception(err)

if __name__ == '__main__':
    # Execute the main function
    hsd_dataframe()