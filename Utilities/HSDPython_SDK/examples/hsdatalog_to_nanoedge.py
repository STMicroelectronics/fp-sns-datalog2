#!/usr/bin/env python
# coding: utf-8 
# *****************************************************************************
#  * @file    hsdatalog_to_nanoedge.py
#  * @author  SRA
# ******************************************************************************
# * @attention
# *
# * Copyright (c) 2022 STMicroelectronics.
# * All rights reserved.
# *
# * This software is licensed under terms that can be found in the LICENSE file
# * in the root directory of this software component.
# * If no LICENSE file comes with this software, it is provided AS-IS.
# *
# *
# ******************************************************************************
#

"""
This script, `hsdatalog_to_nanoedge.py`, is designed to convert data from acquisition folders
generated by STMicroelectronics' HSDatalog tool into a format compatible with NanoEdge AI Studio.
It supports various options for customizing the data conversion, including selecting specific sensors,
setting time ranges, specifying segment length and increment, and more.
It uses Click for command-line interface options and logs information and errors during execution.
The script can be run from the command line with various options to tailor the data conversion
to the user's needs.

Key Features:
- Convert data for specific sensors or all active components.
- Set start and end times for the data conversion.
- Specify the length and increment of each segment for segmentation.
- Option to convert raw data.
- Upload and use a custom Device Template Model (DTDL).
- Enable debug mode to check for corrupted data and timestamps.
"""

import os
import click
from st_hsdatalog.HSD_utils.dtm import HSDatalogDTM
from st_hsdatalog.HSD_utils.exceptions import MissingDeviceModelError, MissingISPUOutputDescriptorException
import st_hsdatalog.HSD_utils.logger as logger
from st_hsdatalog.HSD.HSDatalog import HSDatalog

# Set up the application logger
log = logger.setup_applevel_logger(is_debug = False, file_name= "app_debug.log")

# Define the script version
script_version = "2.1.0"

# Define a callback function to show help information
def show_help(ctx, param, value):
    if value and not ctx.resilient_parsing:
        # Display the help information for the command
        click.secho(ctx.get_help(), color=ctx.color)
        # Display examples of script execution
        click.secho("\n-> Script execution examples:")
        # Example: Convert data for sensor iis3dwb_acc with specific segment length and increment
        click.secho("   python hsdatalog_to_nanoedge.py Acquisition_Folder_Path -s iis3dwb_acc -sl 1000 -si 500", fg='cyan')
        # Example: Convert data for all sensors with specific segment length and increment, and save in a specified output folder
        click.secho("   python hsdatalog_to_nanoedge.py Acquisition_Folder_Path -o Output_Folder_Path -s all -sl 32 -si 64 -r", fg='cyan')
        # Exit the context after showing help
        ctx.exit()

# Define a callback function to validate the signal increment value
def validate_signal_increment(ctx, param, value):
    if value < 0:
        raise click.BadParameter('\'{d}\'. It must be a positive value. Please retry'.format(d=value))
    return value

# Define the Click command with options and arguments
@click.command()
@click.argument('acq_folder', type=click.Path(exists=True))
@click.option('-o', '--output_folder', help="Output folder (this will be created if it doesn't exist)")
@click.option('-s', '--sensor_name', help="Sensor Name - use \"all\" to convert all active sensors data, otherwise select a specific sensor by name", default='')
@click.option('-sl','--signal_length', help="The length of each segment when performing segmentation", type=int, required=True)
@click.option('-si','--signal_increment', help="Parameter to control the overlap, signal_increment = None, is equal to no overlap, signal_increment = frameLength/2 is fifty percent overlap", type=int, callback=validate_signal_increment, default=0)
@click.option('-st','--start_time', help="Start Time - Data conversion will start from this time (seconds)", type=int, default=0)
@click.option('-et','--end_time', help="End Time - Data conversion will end up in this time (seconds)", type=int, default=-1)
@click.option('-r', '--raw_data', is_flag=True, help="Uses Raw data (not multiplied by sensitivity)", default=False)
@click.option('-cdm','--custom_device_model', help="Upload a custom Device Template Model (DTDL)", type=(int, int, str))
@click.version_option(script_version, '-v', '--version', prog_name="hsdatalog_to_nanoedge", is_flag=True, help="hsdatalog_to_nanoedge Converter tool version number")
@click.option('-d', '--debug', is_flag=True, help="[DEBUG] Check for corrupted data and timestamps", default=False)
@click.option("-h", "--help", is_flag=True, is_eager=True, expose_value=False, callback=show_help, help="Show this message and exit.",)

# Define the main function that will be executed when the script is run
def hsd_dataframe(acq_folder, output_folder, sensor_name, signal_length, signal_increment, start_time, end_time, raw_data, custom_device_model, debug):
    
    # If a custom device model is provided, upload it
    if custom_device_model is not None:
        HSDatalogDTM.upload_custom_dtm(custom_device_model)
    
    # Create an instance of the HSDatalog factory
    hsd_factory = HSDatalog()
    try:
        # Create an HSDatalog object for the given acquisition folder
        hsd = hsd_factory.create_hsd(acq_folder)
    except MissingDeviceModelError as error:
        # Handle the case where the device model is missing
        log.error("Device Template Model identifyed by [{}] not supported".format(error))
        log.info("Check your input acquisition folder, then try to upload a custom Device Template Model using -cdm flag".format(error))
        return

    # Set the default output folder if not specified
    output_folder = acq_folder + "_Exported" if output_folder is None else output_folder
    # Create the output folder if it does not exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Enable or disable timestamp recovery based on the debug flag
    hsd.enable_timestamp_recovery(debug)

    # Main loop to process data conversion by sensor
    df_flag = True
    while df_flag:
        # If no sensor name is provided, prompt the user to select a component
        if sensor_name == '':
            component = HSDatalog.ask_for_component(hsd, only_active=True)
            if component is not None:
                # Convert data for the selected component
                convert_data(hsd, component, signal_length, signal_increment, start_time, end_time, raw_data, output_folder, acq_folder)
            else:
                # Exit the loop if no component is selected
                break
        # If 'all' is specified for sensor name, process all active components
        elif sensor_name == 'all':
            # Retrieve a list of all active components
            component_list = HSDatalog.get_all_components(hsd, only_active=True)
            # Iterate over each component and convert data
            for component in component_list:
                convert_data(hsd, component, signal_length, signal_increment, start_time, end_time, raw_data, output_folder, acq_folder)
            # Set flag to False to exit the loop after processing all components
            df_flag = False
        # If a specific sensor name is provided, process only that component
        else:
            component = HSDatalog.get_component(hsd, sensor_name)
            if component is not None:
                # Convert data for the specified component
                convert_data(hsd, component, signal_length, signal_increment, start_time, end_time, raw_data, output_folder, acq_folder)
            else:
                # Log an error if the specified component is not found
                log.exception("No \"{}\" Component found in your Device Configuration file.".format(sensor_name))
            # Set flag to False to exit the loop after processing the specified component
            df_flag = False

# Define a helper function to convert data for a given component
def convert_data(hsd, component, signal_length, signal_increment, start_time, end_time, raw_data, output_folder, acq_folder):
    try:
        # Attempt to convert data to NanoEdge format
        HSDatalog.convert_dat_to_nanoedge(hsd, component, signal_length, signal_increment, start_time, end_time, raw_data, output_folder, 100)
    except MissingISPUOutputDescriptorException as ispu_err:
        # Handle missing ISPU output descriptor exception
        log.error(ispu_err)
        log.warning("Copy the right ISPU output descriptor file in your \"{}\" acquisition folder renamed as \"ispu_output_format.json\"".format(acq_folder))
    except Exception as err:
        # Log any other exceptions that occur
        log.exception(err)

if __name__ == '__main__':
    # Execute the main function
    hsd_dataframe()