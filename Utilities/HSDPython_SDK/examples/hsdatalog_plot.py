#!/usr/bin/env python
# coding: utf-8 
# *****************************************************************************
#  * @file    hsdatalog_plot.py
#  * @author  SRA
# ******************************************************************************
# * @attention
# *
# * Copyright (c) 2022 STMicroelectronics.
# * All rights reserved.
# *
# * This software is licensed under terms that can be found in the LICENSE file
# * in the root directory of this software component.
# * If no LICENSE file comes with this software, it is provided AS-IS.
# *
# *
# ******************************************************************************
#

"""
This script, `hsdatalog_plot.py`, is designed to plot data from acquisition folders
generated by STMicroelectronics' HSDatalog tool. It supports various options for customizing
the plots, including selecting specific sensors, setting time ranges, plotting raw data,
including annotations, and more.
It uses Matplotlib for creating plots and Click for command-line interface options.
The script can be run from the command line with various options to tailor the data
visualization to the user's needs.

Key Features:
- Plot data for specific sensors or all active components.
- Set start and end times for the data plot.
- Option to plot raw data.
- Include annotations in the plot.
- Filter data by tag labels.
- Create subplots for multi-dimensional sensors.
- Display frequency plots for inertial sensors and microphones.
- Upload and use a custom Device Template Model (DTDL).
- Enable debug mode to check for corrupted data and timestamps.
"""

import click
import matplotlib.pyplot as plt
from st_hsdatalog.HSD_utils.dtm import HSDatalogDTM
from st_hsdatalog.HSD_utils.exceptions import MissingDeviceModelError, MissingISPUOutputDescriptorException
import st_hsdatalog.HSD_utils.logger as logger
from st_hsdatalog.HSD.HSDatalog import HSDatalog

log = logger.setup_applevel_logger(is_debug = False, file_name= "app_debug.log")
script_version = "2.1.0"

def show_help(ctx, param, value):
    if value and not ctx.resilient_parsing:
        # Display the help information for the command
        click.secho(ctx.get_help(), color=ctx.color)
        # Display examples of script execution
        click.secho("\n-> Script execution examples:")
        # Example: Plot data for a specific acquisition folder
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path", fg='cyan')
        # Example: Plot data for a specific sensor
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -s Sensor_Name", fg='cyan')
        # Example: Plot data with a specific start and end time
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -st 3 -et 6", fg='cyan')
        # Example: Plot raw data (not multiplied by sensitivity)
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -r", fg='cyan')
        # Example: Plot data including annotations (if any in the acquisition)
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -l", fg='cyan')
        # Example: Plot data with labels. User can select which labels to plot (available labels are filtered by the provided list)
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -tl tag1 -tl tag2", fg='cyan')
        # Example: Plot data in subplots (one subplot for each sensor axis)
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -p", fg='cyan')
        # Example: Plot frequency plots (spectrogram) for inertial sensors and microphones
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -fp", fg='cyan')
        # Example: Upload a custom device model
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -cdm 1 2 custom_model.json", fg='cyan')
        # Example: Enable debug mode (Check Timestamp consistency)
        click.secho("   python hsdatalog_plot.py Acquisition_Folder_Path -d", fg='cyan')
        ctx.exit()

@click.command()
@click.argument('acq_folder', type=click.Path(exists=True))
@click.option('-s', '--sensor_name', help="Component name (Sensor or Algorithm) - use \"all\" to extract all active Component data, otherwise select a specific Component by name", default='')
@click.option('-st','--start_time', help="Start Time - Data plot will start from this time (seconds)", type=int, default=0)
@click.option('-et','--end_time', help="End Time - Data plot will end up in this time (seconds)", type=int, default=-1)
@click.option('-r', '--raw_data', is_flag=True, help="Uses Raw data (not multiplied by sensitivity)", default=False)
@click.option('-l', '--labeled', is_flag=True, help="Plot data including information about annotations taken during acquisition (if any)", default=False)
@click.option('-tl', '--tag_labels', multiple=True, help='A list of tag labels strings to filter and include only the corresponding entries in the converted output')
@click.option('-p', '--subplots', is_flag=True, help="Multiple subplot for multi-dimensional sensors", default=False)
@click.option('-fp', '--fft_plots', is_flag=True, help="Display frequency plots for inertial sensors and microphones", default=False)
@click.option('-cdm','--custom_device_model', help="Upload a custom Device Template Model (DTDL)", type=(int, int, str))
@click.version_option(script_version, '-v', '--version', prog_name="hsdatalog_plot", is_flag=True, help="hsdatalog_plot tool version number")
@click.option('-d', '--debug', is_flag=True, help="[DEBUG] Check for corrupted data and timestamps", default=False)
@click.option("-h"," --help", is_flag=True, is_eager=True, expose_value=False, callback=show_help, help="Show this message and exit.",)

# Define the main function that will be executed when the script is run
def hsd_plot(acq_folder, sensor_name, start_time, end_time, raw_data, labeled, tag_labels, subplots, fft_plots, custom_device_model, debug):

    # If a custom device model is provided, upload it using the HSDatalogDTM module
    if custom_device_model is not None:
        HSDatalogDTM.upload_custom_dtm(custom_device_model)

    # Create an instance of the HSDatalog factory
    hsd_factory = HSDatalog()
    try:
        # Create an HSDatalog object for the given acquisition folder
        hsd = hsd_factory.create_hsd(acq_folder)
    except MissingDeviceModelError as error:
        # Handle the case where the device model is missing and log the error
        log.error("Device Template Model identifyed by [{}] not supported".format(error))
        log.info("Check your input acquisition folder, then try to upload a custom Device Template Model using -cdm flag".format(error))
        return
    
    # Process tag labels if provided as selection filter
    which_tags = []
    if len(tag_labels) > 0:
        which_tags = list(tag_labels)
        labeled = True

    # Enable timestamp recovery if debug mode is on
    hsd.enable_timestamp_recovery(debug)

    # Main loop to plot data
    plot_flag = True
    while plot_flag:
        # If no sensor name is provided, ask the user to select a component
        if sensor_name == '':
            # If a component is selected, plot its data
            component = HSDatalog.ask_for_component(hsd, only_active=True)
            if component is not None:
                label = ask_for_label(hsd, labeled)
                plot(hsd, component, start_time, end_time, label, which_tags, subplots, raw_data, acq_folder, fft_plots)
            else:
                break
        # If 'all' is specified for sensor name, plot all active components
        elif sensor_name == 'all':
            component_list = HSDatalog.get_all_components(hsd, only_active=True)
            label = ask_for_label(hsd, labeled)
            for component in component_list:
                plot(hsd, component, start_time, end_time, label, which_tags, subplots, raw_data, acq_folder, fft_plots)
            if not labeled:
                plot_flag = False
        # If a specific sensor name is provided, plot only that component
        else:
            component = HSDatalog.get_component(hsd, sensor_name)
            if component is not None:
                label = ask_for_label(hsd, labeled)
                plot(hsd, component, start_time, end_time, label, which_tags, subplots, raw_data, acq_folder, fft_plots)
            else:
                # Log an error if the specified component is not found
                log.error("No \"{}\" Component to plot found in your Device Configuration file.".format(sensor_name))
                quit()
            if not labeled:
                plot_flag = False
        
        plt.show()

# Define a helper function to ask the user for a label if the data is labeled
def ask_for_label(hsd, labeled):
    label = None
    if labeled:
        label_list = hsd.get_acquisition_label_classes()
        label = hsd.prompt_label_select_CLI(label_list)
        if label is not None:
            log.info(label)
        else:
            quit()
    return label

# Define a helper function to plot data for a specific component
def plot(hsd, component, start_time, end_time, label, which_tags, subplots, raw_data, acq_folder, fft_plots):
    try:
        df = HSDatalog.plot(hsd, component, start_time, end_time, label, which_tags, subplots, raw_data, fft_plots)
        return df
    except MissingISPUOutputDescriptorException as ispu_err:
        # Handle missing ISPU output descriptor exception
        log.error(ispu_err)
        log.warning("Copy the right ISPU output descriptor file in your \"{}\" acquisition folder renamed as \"ispu_output_format.json\"".format(acq_folder))
    except Exception as err:
        log.exception(err)

if __name__ == '__main__':
    # Execute the main function
    hsd_plot()

