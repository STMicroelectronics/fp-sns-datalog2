#!/usr/bin/env python
# coding: utf-8 
# *****************************************************************************
#  * @file    hsdatalog_check_dummy_data.py
#  * @author  SRA
# ******************************************************************************
# * @attention
# *
# * Copyright (c) 2022 STMicroelectronics.
# * All rights reserved.
# *
# * This software is licensed under terms that can be found in the LICENSE file
# * in the root directory of this software component.
# * If no LICENSE file comes with this software, it is provided AS-IS.
# *
# *
# ******************************************************************************
#

"""
This script, `hsdatalog_check_dummy_data.py`, is designed to check for dummy data in acquisition folders
generated by STMicroelectronics' HSDatalog tool. It supports various options for customizing
the data analysis, including selecting specific sensors, setting time ranges, and more.
The script also checks for required packages and notifies the user if any are missing.
It uses Click for command-line interface options and logs information and errors during execution.
The script can be run from the command line with various options to tailor the data analysis
to the user's needs.

NOTEs:
- The input acquisition folder must contains Dummy Data files. The Board used to acquire data
    must be configured to generate Dummy Data (use DATALOG2_DummyData.bin in FP Binary folder).

Key Features:
- Check dummy data for specific sensors or all active components.
- Set start and end times for the data analysis.
- Specify the size of each data chunk to be processed.
- Upload and use a custom Device Template Model (DTDL).

"""

import click
from st_hsdatalog.HSD_utils.dtm import HSDatalogDTM
from st_hsdatalog.HSD_utils.exceptions import MissingDeviceModelError, MissingISPUOutputDescriptorException
import st_hsdatalog.HSD_utils.logger as logger
from st_hsdatalog.HSD.HSDatalog import HSDatalog

# Set up the application logger
log = logger.setup_applevel_logger(is_debug = False, file_name= "app_debug.log")

# Define the script version
script_version = "2.1.0"

# Define a callback function to show help information
def show_help(ctx, param, value):
    if value and not ctx.resilient_parsing:
        # Display the help information for the command
        click.secho(ctx.get_help(), color=ctx.color)
        # Display examples of script execution
        click.secho("\n-> Script execution examples:")
        # Example: Check dummy data for all sensors in the specified acquisition folder
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path", fg='cyan')
        # Example: Check dummy data for a specific sensor by name
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path -s SENSOR_NAME", fg='cyan')
        # Example: Check dummy data starting from a specific time
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path -st 10", fg='cyan')
        # Example: Check dummy data starting from a specific time and ending at a specific time
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path -st 10 -et 20", fg='cyan')
        # Example: Upload a custom Device Template Model (DTDL) "custom_model.json" with board_id=0xff, fw_id=0xff and check dummy data
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path -cdm 255 255 custom_model.json", fg='cyan')
        # Example: Specify the size of each data chunk to be processed
        click.secho("   python hsdatalog_check_dummy_data.py Acquisition_Folder_Path -cs 1000", fg='cyan')
        # Exit the context after showing help
        ctx.exit()

# Define the Click command with options and arguments
@click.command()
@click.argument('acq_folder', type=click.Path(exists=True))
@click.option('-s', '--sensor_name', help="Sensor name - specify a sensor name to limit the analysis. ", default='all')
@click.option('-st','--start_time', help="Sample Start - Data analysis will start from this time (seconds)", type=int, default=0)
@click.option('-et','--end_time', help="Sample End - Data analysis will end up in this time (seconds)", type=int, default=-1)
@click.option('-cdm','--custom_device_model', help="Upload a custom Device Template Model (DTDL)", type=(int, int, str))
@click.option('-cs', '--chunk_size', help="Specify the size (number of samples) of each data chunk to be processed", default=HSDatalog.DEFAULT_SAMPLES_CHUNK_SIZE)
@click.version_option(script_version, '-v', '--version', prog_name="hsdatalog_check_dummy_data", is_flag=True, help="hsdatalog_check_dummy_data tool version number")
@click.option("-h", "--help", is_flag=True, is_eager=True, expose_value=False, callback=show_help, help="Show this message and exit.",)

# Define the main function that will be executed when the script is run
def hsd_dataframe(acq_folder, sensor_name, start_time, end_time, custom_device_model, chunk_size):
    
    # If a custom device model is provided, upload it
    if custom_device_model is not None:
        HSDatalogDTM.upload_custom_dtm(custom_device_model)

    # Create an instance of the HSDatalog factory
    hsd_factory = HSDatalog()
    try:
        # Create an HSDatalog object for the given acquisition folder
        hsd = hsd_factory.create_hsd(acq_folder)
    except MissingDeviceModelError as error:
        # Handle the case where the device model is missing
        log.error("Device Template Model identifyed by [{}] not supported".format(error))
        log.info("Check your input acquisition folder, then try to upload a custom Device Template Model using -cdm flag".format(error))
        return

    # Main loop to process data analysis by sensor
    df_flag = True
    while df_flag:
        # If 'all' is specified for sensor name, process all active components
        if sensor_name == 'all':
            # Retrieve a list of all active components
            component_list = HSDatalog.get_all_components(hsd, only_active=True)
            # Iterate over each component and check data
            for component in component_list:
                check_data(hsd, component, start_time, end_time, acq_folder, chunk_size)
            # Set flag to False to exit the loop after processing all components
            df_flag = False
        else:
            # If a specific sensor name is provided, process only that component
            component = HSDatalog.get_component(hsd, sensor_name)
            if component is not None:
                # Check data for the specified component
                check_data(hsd, component, start_time, end_time, acq_folder, chunk_size)
            else:
                # Log an error if the specified component is not found
                log.error("No \"{}\" Component found in your Device Configuration file.".format(sensor_name))
            # Set flag to False to exit the loop after processing the specified component
            df_flag = False

# Define a helper function to check data for a given component
def check_data(hsd, component, start_time, end_time, acq_folder, chunk_size):
    try:
        # Attempt to check dummy data for the given component
        HSDatalog.check_dummy_data(hsd, component, start_time, end_time, chunk_size)
    except MissingISPUOutputDescriptorException as ispu_err:
        # Handle missing ISPU output descriptor exception
        log.error(ispu_err)
        log.warning("Copy the right ISPU output descriptor file in your \"{}\" acquisition folder renamed as \"ispu_output_format.json\"".format(acq_folder))
    except Exception as err:
        # Log any other exceptions that occur
        log.exception(err)

if __name__ == '__main__':
    # Execute the main function
    hsd_dataframe()

